{"metadata":{"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}},"usedHelpers":["create-class","class-call-check"]},"ignored":false,"code":"/**\n * A search collection represents a reactive collection on the client,\n * which is used by the ReactiveEngine for searching.\n *\n * @type {SearchCollection}\n */\nSearchCollection = (function () {\n  /**\n   * Constructor\n   *\n   * @param {Object}         indexConfiguration Index configuration\n   * @param {ReactiveEngine} engine             Reactive Engine\n   *\n   * @constructor\n   */\n\n  function SearchCollection(indexConfiguration, engine) {\n    babelHelpers.classCallCheck(this, SearchCollection);\n\n    check(indexConfiguration, Object);\n    check(indexConfiguration.name, Match.OneOf(String, null));\n\n    if (!(engine instanceof ReactiveEngine)) {\n      throw new Meteor.Error('invalid-engine', 'engine needs to be instanceof ReactiveEngine');\n    }\n\n    this._indexConfiguration = indexConfiguration;\n    this._name = indexConfiguration.name + '/easySearch';\n    this._engine = engine;\n\n    if (Meteor.isClient) {\n      this._collection = new Meteor.Collection(this._name);\n    } else if (Meteor.isServer) {\n      this._setUpPublication();\n    }\n  }\n\n  /**\n   * Get name\n   *\n   * @returns {String}\n   */\n\n  /**\n   * Find documents on the client.\n   *\n   * @param {Object} searchDefinition Search definition\n   * @param {Object} options          Options\n   *\n   * @returns {Cursor}\n   */\n\n  SearchCollection.prototype.find = (function () {\n    function find(searchDefinition, options) {\n      if (!Meteor.isClient) {\n        throw new Error('find can only be used on client');\n      }\n\n      var publishHandle = Meteor.subscribe(this.name, searchDefinition, options);\n\n      var count = this._getCount(searchDefinition);\n      var mongoCursor = this._getMongoCursor(searchDefinition, options);\n\n      if (!_.isNumber(count)) {\n        return new Cursor(mongoCursor, 0, false);\n      }\n\n      return new Cursor(mongoCursor, count, true, publishHandle);\n    }\n\n    return find;\n  })();\n\n  /**\n   * Get the count of the cursor.\n   *\n   * @params {Object} searchDefinition Search definition\n   *\n   * @returns {Cursor.count}\n   *\n   * @private\n   */\n\n  SearchCollection.prototype._getCount = (function () {\n    function _getCount(searchDefinition) {\n      var countDoc = this._collection.findOne('searchCount' + JSON.stringify(searchDefinition));\n\n      if (countDoc) {\n        return countDoc.count;\n      }\n    }\n\n    return _getCount;\n  })();\n\n  /**\n   * Get the mongo cursor.\n   *\n   * @param {Object} searchDefinition Search definition\n   * @param {Object} options          Search options\n   *\n   * @returns {Cursor}\n   * @private\n   */\n\n  SearchCollection.prototype._getMongoCursor = (function () {\n    function _getMongoCursor(searchDefinition, options) {\n      var _this = this;\n\n      return this._collection.find({ __searchDefinition: JSON.stringify(searchDefinition), __searchOptions: JSON.stringify(options) }, {\n        transform: function (doc) {\n          delete doc.__searchDefinition;\n          delete doc.__searchOptions;\n          delete doc.__sortPosition;\n\n          _this.engine.config.transform(doc);\n          return doc;\n        },\n        sort: ['__sortPosition']\n      });\n    }\n\n    return _getMongoCursor;\n  })();\n\n  /**\n   * Return a unique document id for publication.\n   *\n   * @param {Document} doc\n   *\n   * @returns string\n   */\n\n  SearchCollection.prototype.generateId = (function () {\n    function generateId(doc) {\n      return doc._id + doc.__searchDefinition + doc.__searchOptions;\n    }\n\n    return generateId;\n  })();\n\n  /**\n   * Add custom fields to the given document\n   *\n   * @param {Document} doc\n   * @param {Object}   data\n   * @returns {*}\n   */\n\n  SearchCollection.prototype.addCustomFields = (function () {\n    function addCustomFields(doc, data) {\n      _.forEach(data, function (val, key) {\n        doc['__' + key] = val;\n      });\n\n      return doc;\n    }\n\n    return addCustomFields;\n  })();\n\n  /**\n   * Set up publication.\n   *\n   * @private\n   */\n\n  SearchCollection.prototype._setUpPublication = (function () {\n    function _setUpPublication() {\n      var collectionScope = this,\n          collectionName = this.name;\n\n      Meteor.publish(collectionName, function (searchDefinition, options) {\n        var _this2 = this;\n\n        check(searchDefinition, Match.OneOf(String, Object));\n        check(options, Object);\n\n        var definitionString = JSON.stringify(searchDefinition),\n            optionsString = JSON.stringify(options);\n\n        options.userId = this.userId;\n        options.publicationScope = this;\n\n        if (!collectionScope._indexConfiguration.permission(options)) {\n          throw new Meteor.Error('not-allowed', \"You're not allowed to search this index!\");\n        }\n\n        collectionScope.engine.checkSearchParam(searchDefinition, collectionScope._indexConfiguration);\n\n        var cursor = collectionScope.engine.search(searchDefinition, {\n          search: options,\n          index: collectionScope._indexConfiguration\n        });\n\n        this.added(collectionName, 'searchCount' + definitionString, { count: cursor.count() });\n\n        var resultsHandle = cursor.mongoCursor.observe({\n          addedAt: function (doc, atIndex, before) {\n            doc = collectionScope.engine.config.beforePublish('addedAt', doc, atIndex, before);\n            doc = collectionScope.addCustomFields(doc, {\n              searchDefinition: definitionString,\n              searchOptions: optionsString,\n              sortPosition: atIndex,\n              originalId: doc._id\n            });\n\n            _this2.added(collectionName, collectionScope.generateId(doc), doc);\n          },\n          changedAt: function (doc, oldDoc, atIndex) {\n            doc = collectionScope.engine.config.beforePublish('changedAt', doc, oldDoc, atIndex);\n            doc = collectionScope.addCustomFields(doc, {\n              searchDefinition: definitionString,\n              searchOptions: optionsString,\n              sortPosition: atIndex,\n              originalId: doc._id\n            });\n\n            _this2.changed(collectionName, collectionScope.generateId(doc), doc);\n          },\n          movedTo: function (doc, fromIndex, toIndex, before) {\n            doc = collectionScope.engine.config.beforePublish('movedTo', doc, fromIndex, toIndex, before);\n            doc = collectionScope.addCustomFields(doc, {\n              searchDefinition: definitionString,\n              searchOptions: optionsString,\n              sortPosition: toIndex\n            });\n\n            var beforeDoc = collectionScope._indexConfiguration.collection.findOne(before);\n\n            if (beforeDoc) {\n              beforeDoc = collectionScope.addCustomFields(beforeDoc, {\n                searchDefinition: definitionString,\n                searchOptions: optionsString,\n                sortPosition: fromIndex\n              });\n              _this2.changed(collectionName, collectionScope.generateId(beforeDoc), beforeDoc);\n            }\n\n            _this2.changed(collectionName, collectionScope.generateId(doc), doc);\n          },\n          removedAt: function (doc, atIndex) {\n            doc = collectionScope.engine.config.beforePublish('removedAt', doc, atIndex);\n            doc = collectionScope.addCustomFields(doc, { searchDefinition: definitionString, searchOptions: optionsString });\n            _this2.removed(collectionName, collectionScope.generateId(doc));\n          }\n        });\n\n        this.onStop(function () {\n          resultsHandle.stop();\n        });\n\n        this.ready();\n      });\n    }\n\n    return _setUpPublication;\n  })();\n\n  babelHelpers.createClass(SearchCollection, [{\n    key: 'name',\n    get: function () {\n      return this._name;\n    }\n\n    /**\n     * Get engine\n     *\n     * @returns {ReactiveEngine}\n     */\n  }, {\n    key: 'engine',\n    get: function () {\n      return this._engine;\n    }\n  }]);\n  return SearchCollection;\n})();","ast":null,"map":{"version":3,"sources":["/lib/core/search-collection.js"],"names":[],"mappings":"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","file":"/lib/core/search-collection.js.map","sourcesContent":["/**\n * A search collection represents a reactive collection on the client,\n * which is used by the ReactiveEngine for searching.\n *\n * @type {SearchCollection}\n */\nSearchCollection = class SearchCollection {\n  /**\n   * Constructor\n   *\n   * @param {Object}         indexConfiguration Index configuration\n   * @param {ReactiveEngine} engine             Reactive Engine\n   *\n   * @constructor\n   */\n  constructor(indexConfiguration, engine) {\n    check(indexConfiguration, Object);\n    check(indexConfiguration.name, Match.OneOf(String, null));\n\n    if (!(engine instanceof ReactiveEngine)) {\n      throw new Meteor.Error('invalid-engine', 'engine needs to be instanceof ReactiveEngine');\n    }\n\n    this._indexConfiguration = indexConfiguration;\n    this._name = `${indexConfiguration.name}/easySearch`;\n    this._engine = engine;\n\n    if (Meteor.isClient) {\n      this._collection = new Meteor.Collection(this._name);\n    } else if (Meteor.isServer) {\n      this._setUpPublication();\n    }\n  }\n\n  /**\n   * Get name\n   *\n   * @returns {String}\n   */\n  get name() {\n    return this._name;\n  }\n\n  /**\n   * Get engine\n   *\n   * @returns {ReactiveEngine}\n   */\n  get engine() {\n    return this._engine;\n  }\n\n  /**\n   * Find documents on the client.\n   *\n   * @param {Object} searchDefinition Search definition\n   * @param {Object} options          Options\n   *\n   * @returns {Cursor}\n   */\n  find(searchDefinition, options) {\n    if (!Meteor.isClient) {\n      throw new Error('find can only be used on client');\n    }\n\n    let publishHandle = Meteor.subscribe(this.name, searchDefinition, options);\n\n    let count = this._getCount(searchDefinition);\n    let mongoCursor = this._getMongoCursor(searchDefinition, options);\n\n    if (!_.isNumber(count)) {\n      return new Cursor(mongoCursor, 0, false);\n    }\n\n    return new Cursor(mongoCursor, count, true, publishHandle);\n  }\n\n  /**\n   * Get the count of the cursor.\n   *\n   * @params {Object} searchDefinition Search definition\n   *\n   * @returns {Cursor.count}\n   *\n   * @private\n   */\n  _getCount(searchDefinition) {\n    let countDoc = this._collection.findOne('searchCount' + JSON.stringify(searchDefinition));\n\n    if (countDoc) {\n      return countDoc.count;\n    }\n  }\n\n  /**\n   * Get the mongo cursor.\n   *\n   * @param {Object} searchDefinition Search definition\n   * @param {Object} options          Search options\n   *\n   * @returns {Cursor}\n   * @private\n   */\n  _getMongoCursor(searchDefinition, options) {\n    return this._collection.find(\n      { __searchDefinition: JSON.stringify(searchDefinition), __searchOptions: JSON.stringify(options) },\n      {\n        transform: (doc) => {\n          delete doc.__searchDefinition;\n          delete doc.__searchOptions;\n          delete doc.__sortPosition;\n\n          this.engine.config.transform(doc);\n          return doc;\n        },\n        sort: ['__sortPosition']\n      }\n    );\n  }\n\n  /**\n   * Return a unique document id for publication.\n   *\n   * @param {Document} doc\n   *\n   * @returns string\n   */\n  generateId(doc) {\n    return doc._id + doc.__searchDefinition + doc.__searchOptions;\n  }\n\n  /**\n   * Add custom fields to the given document\n   *\n   * @param {Document} doc\n   * @param {Object}   data\n   * @returns {*}\n   */\n  addCustomFields(doc, data) {\n    _.forEach(data, function (val, key) {\n      doc['__' + key] = val;\n    });\n\n    return doc;\n  }\n\n  /**\n   * Set up publication.\n   *\n   * @private\n   */\n  _setUpPublication() {\n    var collectionScope = this,\n      collectionName = this.name;\n\n    Meteor.publish(collectionName, function (searchDefinition, options) {\n      check(searchDefinition, Match.OneOf(String, Object));\n      check(options, Object);\n\n      let definitionString = JSON.stringify(searchDefinition),\n        optionsString = JSON.stringify(options);\n\n      options.userId = this.userId;\n      options.publicationScope = this;\n\n      if (!collectionScope._indexConfiguration.permission(options)) {\n        throw new Meteor.Error('not-allowed', \"You're not allowed to search this index!\");\n      }\n\n      collectionScope.engine.checkSearchParam(searchDefinition, collectionScope._indexConfiguration);\n\n      let cursor = collectionScope.engine.search(searchDefinition, {\n        search: options,\n        index: collectionScope._indexConfiguration\n      });\n\n      this.added(collectionName, 'searchCount' + definitionString, { count: cursor.count() });\n\n      let resultsHandle = cursor.mongoCursor.observe({\n        addedAt: (doc, atIndex, before) => {\n          doc = collectionScope.engine.config.beforePublish('addedAt', doc, atIndex, before);\n          doc = collectionScope.addCustomFields(doc, {\n            searchDefinition: definitionString,\n            searchOptions: optionsString,\n            sortPosition: atIndex,\n            originalId: doc._id\n          });\n\n          this.added(collectionName, collectionScope.generateId(doc), doc);\n        },\n        changedAt: (doc, oldDoc, atIndex) => {\n          doc = collectionScope.engine.config.beforePublish('changedAt', doc, oldDoc, atIndex);\n          doc = collectionScope.addCustomFields(doc, {\n            searchDefinition: definitionString,\n            searchOptions: optionsString,\n            sortPosition: atIndex,\n            originalId: doc._id\n          });\n\n          this.changed(collectionName, collectionScope.generateId(doc), doc)\n        },\n        movedTo: (doc, fromIndex, toIndex, before) => {\n          doc = collectionScope.engine.config.beforePublish('movedTo', doc, fromIndex, toIndex, before);\n          doc = collectionScope.addCustomFields(doc, {\n            searchDefinition: definitionString,\n            searchOptions: optionsString,\n            sortPosition: toIndex\n          });\n\n          let beforeDoc = collectionScope._indexConfiguration.collection.findOne(before);\n\n          if (beforeDoc) {\n            beforeDoc = collectionScope.addCustomFields(beforeDoc, {\n              searchDefinition: definitionString,\n              searchOptions: optionsString,\n              sortPosition: fromIndex\n            });\n            this.changed(collectionName, collectionScope.generateId(beforeDoc), beforeDoc);\n          }\n\n          this.changed(collectionName, collectionScope.generateId(doc), doc);\n        },\n        removedAt: (doc, atIndex) => {\n          doc = collectionScope.engine.config.beforePublish('removedAt', doc, atIndex);\n          doc = collectionScope.addCustomFields(doc, { searchDefinition: definitionString, searchOptions: optionsString });\n          this.removed(collectionName, collectionScope.generateId(doc));\n        }\n      });\n\n      this.onStop(function () {\n        resultsHandle.stop();\n      });\n\n      this.ready();\n    });\n  }\n};\n"]},"hash":"8a79ff75f936f35f0b859b2026330bc3e925f8f3"}
