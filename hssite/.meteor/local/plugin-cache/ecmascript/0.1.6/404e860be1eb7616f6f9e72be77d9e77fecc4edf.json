{"metadata":{"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}},"usedHelpers":["inherits","class-call-check"]},"ignored":false,"code":"/**\n * A ReactiveEngine handles the reactive logic, such as subscribing\n * and publishing documents into a self contained collection.\n *\n * @type {ReactiveEngine}\n */\nReactiveEngine = (function (_Engine) {\n  babelHelpers.inherits(ReactiveEngine, _Engine);\n\n  /**\n   * Constructor.\n   *\n   * @param {Object} config Configuration\n   *\n   * @constructor\n   */\n\n  function ReactiveEngine(config) {\n    babelHelpers.classCallCheck(this, ReactiveEngine);\n\n    _Engine.call(this, config);\n\n    if (this === this.constructor) {\n      throw new Error('Cannot initialize instance of ReactiveEngine');\n    }\n\n    if (!_.isFunction(this.getSearchCursor)) {\n      throw new Error('Reactive engine needs to implement getSearchCursor method');\n    }\n  }\n\n  /**\n   * Return default configuration.\n   *\n   * @returns {Object}\n   */\n\n  ReactiveEngine.prototype.defaultConfiguration = (function () {\n    function defaultConfiguration() {\n      return _.defaults({}, {\n        transform: function (doc) {\n          return doc;\n        },\n        beforePublish: function (event, doc) {\n          return doc;\n        }\n      }, _Engine.prototype.defaultConfiguration.call(this));\n    }\n\n    return defaultConfiguration;\n  })();\n\n  /**\n   * Code to run on index creation\n   *\n   * @param {Object} indexConfig Index configuration\n   */\n\n  ReactiveEngine.prototype.onIndexCreate = (function () {\n    function onIndexCreate(indexConfig) {\n      _Engine.prototype.onIndexCreate.call(this, indexConfig);\n      indexConfig.searchCollection = new SearchCollection(indexConfig, this);\n      indexConfig.mongoCollection = indexConfig.searchCollection._collection;\n    }\n\n    return onIndexCreate;\n  })();\n\n  /**\n   * Transform the search definition.\n   *\n   * @param {String|Object} searchDefinition Search definition\n   * @param {Object}        options          Search and index options\n   *\n   * @returns {Object}\n   */\n\n  ReactiveEngine.prototype.transformSearchDefinition = (function () {\n    function transformSearchDefinition(searchDefinition, options) {\n      if (_.isString(searchDefinition)) {\n        (function () {\n          var obj = {};\n\n          _.each(options.index.fields, function (field) {\n            obj[field] = searchDefinition;\n          });\n\n          searchDefinition = obj;\n        })();\n      }\n\n      return searchDefinition;\n    }\n\n    return transformSearchDefinition;\n  })();\n\n  /**\n   * Check the given search parameter for validity\n   *\n   * @param search\n   * @param indexOptions\n   */\n\n  ReactiveEngine.prototype.checkSearchParam = (function () {\n    function checkSearchParam(search, indexOptions) {\n      check(search, Match.OneOf(String, Object));\n\n      if (_.isObject(search)) {\n        _.each(search, function (val, field) {\n          check(val, String);\n\n          if (-1 === _.indexOf(indexOptions.allowedFields, field)) {\n            throw new Meteor.Error('Not allowed to search over field \"' + field + '\"');\n          }\n        });\n      }\n    }\n\n    return checkSearchParam;\n  })();\n\n  /**\n   * Reactively search on the collection.\n   *\n   * @param {Object} searchDefinition Search definition\n   * @param {Object} options          Options\n   *\n   * @returns {Cursor}\n   */\n\n  ReactiveEngine.prototype.search = (function () {\n    function search(searchDefinition, options) {\n      if (Meteor.isClient) {\n        return options.index.searchCollection.find(searchDefinition, options.search);\n      } else {\n        return this.getSearchCursor(this.transformSearchDefinition(searchDefinition, options), options);\n      }\n    }\n\n    return search;\n  })();\n\n  return ReactiveEngine;\n})(Engine);","ast":null,"map":{"version":3,"sources":["/lib/core/reactive-engine.js"],"names":[],"mappings":";;;;;;AAMA,cAAc;wBAAS,cAAc;;;;;;;;;;AAQxB,WARU,cAAc,CAQvB,MAAM,EAAE;sCARC,cAAc;;AASjC,uBAAM,MAAM,CAAC,CAAC;;AAEd,QAAI,IAAI,KAAK,IAAI,CAAC,WAAW,EAAE;AAC7B,YAAM,IAAI,KAAK,CAAC,8CAA8C,CAAC,CAAC;KACjE;;AAED,QAAI,CAAC,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,eAAe,CAAC,EAAE;AACvC,YAAM,IAAI,KAAK,CAAC,2DAA2D,CAAC,CAAC;KAC9E;GACF;;;;;;;;AAlBoB,gBAAc,WAyBnC,oBAAoB;AAAA,oCAAG;AACrB,aAAO,CAAC,CAAC,QAAQ,CAAC,EAAE,EAAE;AACpB,iBAAS,EAAE,UAAC,GAAG;iBAAK,GAAG;SAAA;AACvB,qBAAa,EAAE,UAAC,KAAK,EAAE,GAAG;iBAAK,GAAG;SAAA;OACnC,EAAE,kBAAM,oBAAoB,KAAA,MAAE,CAAC,CAAC;KAClC;;;;;;;;;;;AA9BoB,gBAAc,WAqCnC,aAAa;AAAA,2BAAC,WAAW,EAAE;AACzB,wBAAM,aAAa,KAAA,OAAC,WAAW,CAAC,CAAC;AACjC,iBAAW,CAAC,gBAAgB,GAAG,IAAI,gBAAgB,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;AACvE,iBAAW,CAAC,eAAe,GAAG,WAAW,CAAC,gBAAgB,CAAC,WAAW,CAAC;KACxE;;;;;;;;;;;;;;AAzCoB,gBAAc,WAmDnC,yBAAyB;AAAA,uCAAC,gBAAgB,EAAE,OAAO,EAAE;AACnD,UAAI,CAAC,CAAC,QAAQ,CAAC,gBAAgB,CAAC,EAAE;;AAChC,cAAI,GAAG,GAAG,EAAE,CAAC;;AAEb,WAAC,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,EAAE,UAAU,KAAK,EAAE;AAC5C,eAAG,CAAC,KAAK,CAAC,GAAG,gBAAgB,CAAC;WAC/B,CAAC,CAAC;;AAEH,0BAAgB,GAAG,GAAG,CAAC;;OACxB;;AAED,aAAO,gBAAgB,CAAC;KACzB;;;;;;;;;;;;AA/DoB,gBAAc,WAuEnC,gBAAgB;AAAA,8BAAC,MAAM,EAAE,YAAY,EAAE;AACrC,WAAK,CAAC,MAAM,EAAE,KAAK,CAAC,KAAK,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC;;AAE3C,UAAI,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;AACtB,SAAC,CAAC,IAAI,CAAC,MAAM,EAAE,UAAU,GAAG,EAAE,KAAK,EAAE;AACnC,eAAK,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;;AAEnB,cAAI,CAAC,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,aAAa,EAAE,KAAK,CAAC,EAAE;AACvD,kBAAM,IAAI,MAAM,CAAC,KAAK,wCAAsC,KAAK,OAAI,CAAC;WACvE;SACF,CAAC,CAAC;OACJ;KACF;;;;;;;;;;;;;;AAnFoB,gBAAc,WA6FnC,MAAM;AAAA,oBAAC,gBAAgB,EAAE,OAAO,EAAE;AAChC,UAAI,MAAM,CAAC,QAAQ,EAAE;AACnB,eAAO,OAAO,CAAC,KAAK,CAAC,gBAAgB,CAAC,IAAI,CAAC,gBAAgB,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC;OAC9E,MAAM;AACL,eAAO,IAAI,CAAC,eAAe,CACzB,IAAI,CAAC,yBAAyB,CAAC,gBAAgB,EAAE,OAAO,CAAC,EACzD,OAAO,CACR,CAAC;OACH;KACF;;;;;SAtGoB,cAAc;GAAS,MAAM,CAuGnD,CAAC","file":"/lib/core/reactive-engine.js.map","sourcesContent":["/**\n * A ReactiveEngine handles the reactive logic, such as subscribing\n * and publishing documents into a self contained collection.\n *\n * @type {ReactiveEngine}\n */\nReactiveEngine = class ReactiveEngine extends Engine {\n  /**\n   * Constructor.\n   *\n   * @param {Object} config Configuration\n   *\n   * @constructor\n   */\n  constructor(config) {\n    super(config);\n\n    if (this === this.constructor) {\n      throw new Error('Cannot initialize instance of ReactiveEngine');\n    }\n\n    if (!_.isFunction(this.getSearchCursor)) {\n      throw new Error('Reactive engine needs to implement getSearchCursor method');\n    }\n  }\n\n  /**\n   * Return default configuration.\n   *\n   * @returns {Object}\n   */\n  defaultConfiguration() {\n    return _.defaults({}, {\n      transform: (doc) => doc,\n      beforePublish: (event, doc) => doc\n    }, super.defaultConfiguration());\n  }\n\n  /**\n   * Code to run on index creation\n   *\n   * @param {Object} indexConfig Index configuration\n   */\n  onIndexCreate(indexConfig) {\n    super.onIndexCreate(indexConfig);\n    indexConfig.searchCollection = new SearchCollection(indexConfig, this);\n    indexConfig.mongoCollection = indexConfig.searchCollection._collection;\n  }\n\n  /**\n   * Transform the search definition.\n   *\n   * @param {String|Object} searchDefinition Search definition\n   * @param {Object}        options          Search and index options\n   *\n   * @returns {Object}\n   */\n  transformSearchDefinition(searchDefinition, options) {\n    if (_.isString(searchDefinition)) {\n      let obj = {};\n\n      _.each(options.index.fields, function (field) {\n        obj[field] = searchDefinition;\n      });\n\n      searchDefinition = obj;\n    }\n\n    return searchDefinition;\n  }\n\n  /**\n   * Check the given search parameter for validity\n   *\n   * @param search\n   * @param indexOptions\n   */\n  checkSearchParam(search, indexOptions) {\n    check(search, Match.OneOf(String, Object));\n\n    if (_.isObject(search)) {\n      _.each(search, function (val, field) {\n        check(val, String);\n\n        if (-1 === _.indexOf(indexOptions.allowedFields, field)) {\n          throw new Meteor.Error(`Not allowed to search over field \"${field}\"`);\n        }\n      });\n    }\n  }\n\n  /**\n   * Reactively search on the collection.\n   *\n   * @param {Object} searchDefinition Search definition\n   * @param {Object} options          Options\n   *\n   * @returns {Cursor}\n   */\n  search(searchDefinition, options) {\n    if (Meteor.isClient) {\n      return options.index.searchCollection.find(searchDefinition, options.search);\n    } else {\n      return this.getSearchCursor(\n        this.transformSearchDefinition(searchDefinition, options),\n        options\n      );\n    }\n  }\n};\n"]},"hash":"404e860be1eb7616f6f9e72be77d9e77fecc4edf"}
