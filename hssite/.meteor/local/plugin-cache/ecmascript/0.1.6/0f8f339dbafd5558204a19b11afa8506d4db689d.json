{"metadata":{"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}},"usedHelpers":["class-call-check"]},"ignored":false,"code":"/**\n * An Engine is the technology used for searching with EasySearch, with\n * customizable configuration to how it interacts with the data from the Index.\n *\n * @type {Engine}\n */\nEngine = (function () {\n  /**\n   * Constructor\n   *\n   * @param {Object} config configuration\n   *\n   * @constructor\n   */\n\n  function Engine() {\n    var config = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n    babelHelpers.classCallCheck(this, Engine);\n\n    if (this.constructor === Engine) {\n      throw new Error('Cannot initialize instance of Engine');\n    }\n\n    if (!_.isFunction(this.search)) {\n      throw new Error('Engine needs to implement search method');\n    }\n\n    this.config = _.defaults({}, config, this.defaultConfiguration());\n  }\n\n  /**\n   * Return default configuration.\n   *\n   * @returns {Object}\n   */\n\n  Engine.prototype.defaultConfiguration = (function () {\n    function defaultConfiguration() {\n      return {};\n    }\n\n    return defaultConfiguration;\n  })();\n\n  /**\n   * Call a configuration method with the engine scope.\n   *\n   * @param {String} methodName Method name\n   * @param {Object} args       Arguments for the method\n   *\n   * @returns {*}\n   */\n\n  Engine.prototype.callConfigMethod = (function () {\n    function callConfigMethod(methodName) {\n      check(methodName, String);\n\n      var func = this.config[methodName];\n\n      if (func) {\n        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n\n        return func.apply(this, args);\n      }\n    }\n\n    return callConfigMethod;\n  })();\n\n  /**\n   * Check the given search parameter for validity\n   *\n   * @param search\n   */\n\n  Engine.prototype.checkSearchParam = (function () {\n    function checkSearchParam(search) {\n      check(search, String);\n    }\n\n    return checkSearchParam;\n  })();\n\n  /**\n   *Code to run on index creation\n   *\n   * @param {Object} indexConfig Index configuraction\n   */\n\n  Engine.prototype.onIndexCreate = (function () {\n    function onIndexCreate(indexConfig) {\n      if (!indexConfig.allowedFields) {\n        indexConfig.allowedFields = indexConfig.fields;\n      }\n    }\n\n    return onIndexCreate;\n  })();\n\n  return Engine;\n})();","ast":null,"map":{"version":3,"sources":["/lib/core/engine.js"],"names":[],"mappings":";;;;;;AAMA,MAAM;;;;;;;;;AAQO,WARE,MAAM,GAQM;QAAb,MAAM,yDAAG,EAAE;sCARV,MAAM;;AASjB,QAAI,IAAI,CAAC,WAAW,KAAK,MAAM,EAAE;AAC/B,YAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAC;KACzD;;AAED,QAAI,CAAC,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;AAC9B,YAAM,IAAI,KAAK,CAAC,yCAAyC,CAAC,CAAC;KAC5D;;AAED,QAAI,CAAC,MAAM,GAAG,CAAC,CAAC,QAAQ,CAAC,EAAE,EAAE,MAAM,EAAE,IAAI,CAAC,oBAAoB,EAAE,CAAC,CAAC;GACnE;;;;;;;;AAlBY,QAAM,WAyBnB,oBAAoB;AAAA,oCAAG;AACrB,aAAO,EAAE,CAAC;KACX;;;;;;;;;;;;;;AA3BY,QAAM,WAqCnB,gBAAgB;AAAA,8BAAC,UAAU,EAAW;AACpC,WAAK,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;;AAE1B,UAAI,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;;AAEnC,UAAI,IAAI,EAAE;0CALoB,IAAI;AAAJ,cAAI;;;AAMhC,eAAO,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;OAC/B;KACF;;;;;;;;;;;AA7CY,QAAM,WAoDnB,gBAAgB;AAAA,8BAAC,MAAM,EAAE;AACvB,WAAK,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;KACvB;;;;;;;;;;;AAtDY,QAAM,WA6DnB,aAAa;AAAA,2BAAC,WAAW,EAAE;AACzB,UAAI,CAAC,WAAW,CAAC,aAAa,EAAE;AAC9B,mBAAW,CAAC,aAAa,GAAG,WAAW,CAAC,MAAM,CAAC;OAChD;KACF;;;;;SAjEY,MAAM;IAkEpB,CAAC","file":"/lib/core/engine.js.map","sourcesContent":["/**\n * An Engine is the technology used for searching with EasySearch, with\n * customizable configuration to how it interacts with the data from the Index.\n *\n * @type {Engine}\n */\nEngine = class Engine {\n  /**\n   * Constructor\n   *\n   * @param {Object} config configuration\n   *\n   * @constructor\n   */\n  constructor(config = {}) {\n    if (this.constructor === Engine) {\n      throw new Error('Cannot initialize instance of Engine');\n    }\n\n    if (!_.isFunction(this.search)) {\n      throw new Error('Engine needs to implement search method');\n    }\n\n    this.config = _.defaults({}, config, this.defaultConfiguration());\n  }\n\n  /**\n   * Return default configuration.\n   *\n   * @returns {Object}\n   */\n  defaultConfiguration() {\n    return {};\n  }\n\n  /**\n   * Call a configuration method with the engine scope.\n   *\n   * @param {String} methodName Method name\n   * @param {Object} args       Arguments for the method\n   *\n   * @returns {*}\n   */\n  callConfigMethod(methodName, ...args) {\n    check(methodName, String);\n\n    let func = this.config[methodName];\n\n    if (func) {\n      return func.apply(this, args);\n    }\n  }\n\n  /**\n   * Check the given search parameter for validity\n   *\n   * @param search\n   */\n  checkSearchParam(search) {\n    check(search, String);\n  }\n\n  /**\n   *Code to run on index creation\n   *\n   * @param {Object} indexConfig Index configuraction\n   */\n  onIndexCreate(indexConfig) {\n    if (!indexConfig.allowedFields) {\n      indexConfig.allowedFields = indexConfig.fields;\n    }\n  }\n};\n"]},"hash":"0f8f339dbafd5558204a19b11afa8506d4db689d"}
