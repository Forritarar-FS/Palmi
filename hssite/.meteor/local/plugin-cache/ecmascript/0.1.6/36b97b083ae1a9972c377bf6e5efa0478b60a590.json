{"metadata":{"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}},"usedHelpers":["inherits","create-class","class-call-check"]},"ignored":false,"code":"/**\n * The BaseComponent holds the base logic for EasySearch Components.\n *\n * @type {BaseComponent}\n */\nBaseComponent = (function (_BlazeComponent) {\n  babelHelpers.inherits(BaseComponent, _BlazeComponent);\n\n  function BaseComponent() {\n    babelHelpers.classCallCheck(this, BaseComponent);\n\n    _BlazeComponent.apply(this, arguments);\n  }\n\n  /**\n   * Setup component on created.\n   */\n\n  BaseComponent.prototype.onCreated = (function () {\n    function onCreated() {\n      var _ref;\n\n      var index = this.getData().index,\n          indexes = [index];\n\n      if (!index) {\n        indexes = this.getData().indexes;\n      }\n\n      if (_.isEmpty(indexes)) {\n        throw new Meteor.Error('no-index', 'Please provide an index for your component');\n      }\n\n      if (indexes.filter(function (index) {\n        return index instanceof EasySearch.Index;\n      }).length != indexes.length) {\n        throw new Meteor.Error('invalid-configuration', 'Did not receive an index or an array of indexes: \"' + indexes.toString() + '\"');\n      }\n\n      this.indexes = indexes;\n      this.options = _.defaults({}, (_ref = _).omit.apply(_ref, [this.getData()].concat(BaseComponent.reserveredProperties)), this.defaultOptions);\n\n      check(this.name, Match.Optional(String));\n      check(this.options, Object);\n\n      this.eachIndex(function (index, name) {\n        if (!index.getComponentDict(name)) {\n          index.registerComponent(name);\n        }\n      });\n    }\n\n    return onCreated;\n  })();\n\n  /**\n   * Return the default options.\n   *\n   * @returns {Object}\n   */\n\n  /**\n   * Search the component.\n   *\n   * @param {String} searchString String to search for\n   */\n\n  BaseComponent.prototype.search = (function () {\n    function search(searchString) {\n      check(searchString, String);\n\n      this.eachIndex(function (index, name) {\n        index.getComponentMethods(name).search(searchString);\n      });\n    }\n\n    return search;\n  })();\n\n  /**\n   * Return the data.\n   *\n   * @returns {Object}\n   */\n\n  BaseComponent.prototype.getData = (function () {\n    function getData() {\n      return this.data() || {};\n    }\n\n    return getData;\n  })();\n\n  /**\n   * Return the dictionaries.\n   *\n   * @returns {Object}\n   */\n\n  /**\n   * Loop through each index and apply a function\n   *\n   * @param {Function} func   Function to run\n   * @param {String}   method Lodash method name\n   *\n   * @return mixed\n   */\n\n  BaseComponent.prototype.eachIndex = (function () {\n    function eachIndex(func) {\n      var method = arguments.length <= 1 || arguments[1] === undefined ? 'each' : arguments[1];\n\n      var componentScope = this,\n          logic = this.getData().logic;\n\n      if (!_.isEmpty(logic)) {\n        method = 'OR' === logic ? 'some' : 'every';\n      }\n\n      return _[method](this.indexes, function (index) {\n        return func.apply(this, [index, componentScope.name]);\n      });\n    }\n\n    return eachIndex;\n  })();\n\n  babelHelpers.createClass(BaseComponent, [{\n    key: 'name',\n\n    /**\n     * Return the name of the component.\n     *\n     * @returns {String}\n     */\n    get: function () {\n      return this.getData().name;\n    }\n\n    /**\n     * Return an array of properties that are reserved to the base component.\n     *\n     * @returns {String[]}\n     */\n  }, {\n    key: 'defaultOptions',\n    get: function () {\n      return {};\n    }\n  }, {\n    key: 'dicts',\n    get: function () {\n      return this.eachIndex(function (index, name) {\n        return index.getComponentDict(name);\n      }, 'map');\n    }\n  }], [{\n    key: 'reserveredProperties',\n    get: function () {\n      return ['index', 'indexes', 'name', 'attributes'];\n    }\n  }]);\n  return BaseComponent;\n})(BlazeComponent);\n\nEasySearch.BaseComponent = BaseComponent;","ast":null,"map":{"version":3,"sources":["/lib/base.js"],"names":[],"mappings":"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","file":"/lib/base.js.map","sourcesContent":["/**\n * The BaseComponent holds the base logic for EasySearch Components.\n *\n * @type {BaseComponent}\n */\nBaseComponent = class BaseComponent extends BlazeComponent {\n  /**\n   * Return the name of the component.\n   *\n   * @returns {String}\n   */\n  get name() {\n    return this.getData().name;\n  }\n\n  /**\n   * Return an array of properties that are reserved to the base component.\n   *\n   * @returns {String[]}\n   */\n  static get reserveredProperties() {\n    return ['index', 'indexes', 'name', 'attributes'];\n  }\n\n  /**\n   * Setup component on created.\n   */\n  onCreated() {\n    let index = this.getData().index,\n      indexes = [index];\n\n    if (!index) {\n      indexes = this.getData().indexes;\n    }\n\n    if (_.isEmpty(indexes)) {\n      throw new Meteor.Error('no-index', 'Please provide an index for your component');\n    }\n\n    if (indexes.filter((index) => index instanceof EasySearch.Index).length != indexes.length) {\n      throw new Meteor.Error(\n        'invalid-configuration',\n        `Did not receive an index or an array of indexes: \"${indexes.toString()}\"`\n      );\n    }\n\n    this.indexes = indexes;\n    this.options = _.defaults({}, _.omit(this.getData(), ...BaseComponent.reserveredProperties), this.defaultOptions);\n\n    check(this.name, Match.Optional(String));\n    check(this.options, Object);\n\n    this.eachIndex(function (index, name) {\n      if (!index.getComponentDict(name)) {\n        index.registerComponent(name);\n      }\n    });\n  }\n\n  /**\n   * Return the default options.\n   *\n   * @returns {Object}\n   */\n  get defaultOptions () {\n    return {};\n  }\n\n  /**\n   * Search the component.\n   *\n   * @param {String} searchString String to search for\n   */\n  search(searchString) {\n    check(searchString, String);\n\n    this.eachIndex(function (index, name) {\n      index.getComponentMethods(name).search(searchString);\n    });\n  }\n\n  /**\n   * Return the data.\n   *\n   * @returns {Object}\n   */\n  getData() {\n    return (this.data() || {});\n  }\n\n  /**\n   * Return the dictionaries.\n   *\n   * @returns {Object}\n   */\n  get dicts() {\n    return this.eachIndex((index, name) => {\n      return index.getComponentDict(name);\n    }, 'map');\n  }\n\n  /**\n   * Loop through each index and apply a function\n   *\n   * @param {Function} func   Function to run\n   * @param {String}   method Lodash method name\n   *\n   * @return mixed\n   */\n  eachIndex(func, method = 'each') {\n    let componentScope = this,\n      logic = this.getData().logic;\n\n    if (!_.isEmpty(logic)) {\n      method = 'OR' === logic ? 'some' : 'every';\n    }\n\n    return _[method](this.indexes, function (index) {\n      return func.apply(this, [index, componentScope.name]);\n    });\n  }\n};\n\nEasySearch.BaseComponent = BaseComponent;\n"]},"hash":"36b97b083ae1a9972c377bf6e5efa0478b60a590"}
