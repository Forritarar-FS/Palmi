{"metadata":{"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}},"usedHelpers":["inherits","class-call-check"]},"ignored":false,"code":"/**\n * The MongoDBEngine lets you search the index on the server side with MongoDB. Subscriptions and publications\n * are handled within the Engine.\n *\n * @type {MongoDBEngine}\n */\nMongoDBEngine = (function (_ReactiveEngine) {\n  babelHelpers.inherits(MongoDBEngine, _ReactiveEngine);\n\n  function MongoDBEngine() {\n    babelHelpers.classCallCheck(this, MongoDBEngine);\n\n    _ReactiveEngine.apply(this, arguments);\n  }\n\n  /**\n   * Return default configuration.\n   *\n   * @returns {Object}\n   */\n\n  MongoDBEngine.prototype.defaultConfiguration = (function () {\n    function defaultConfiguration() {\n      return _.defaults({}, MongoDBEngine.defaultMongoConfiguration(this), _ReactiveEngine.prototype.defaultConfiguration.call(this));\n    }\n\n    return defaultConfiguration;\n  })();\n\n  /**\n   * Default mongo configuration, used in constructor and MinimongoEngine to get the configuration.\n   *\n   * @param {Object} engineScope Scope of the engine\n   *\n   * @returns {Object}\n   */\n\n  MongoDBEngine.defaultMongoConfiguration = (function () {\n    function defaultMongoConfiguration(engineScope) {\n      return {\n        aggregation: '$or',\n        selector: function (searchObject, options, aggregation) {\n          var selector = {};\n\n          selector[aggregation] = [];\n\n          _.each(searchObject, function (searchString, field) {\n            var fieldSelector = engineScope.callConfigMethod('selectorPerField', field, searchString, options);\n\n            if (fieldSelector) {\n              selector[aggregation].push(fieldSelector);\n            }\n          });\n\n          return selector;\n        },\n        selectorPerField: function (field, searchString) {\n          var selector = {};\n\n          selector[field] = { '$regex': '.*' + searchString + '.*', '$options': 'i' };\n\n          return selector;\n        },\n        sort: function (searchObject, options) {\n          return options.index.fields;\n        }\n      };\n    }\n\n    return defaultMongoConfiguration;\n  })();\n\n  /**\n   * Return the find options for the mongo find query.\n   *\n   * @param {String} searchDefinition Search definition\n   * @param {Object} options          Search and index options\n   */\n\n  MongoDBEngine.prototype.getFindOptions = (function () {\n    function getFindOptions(searchDefinition, options) {\n      return {\n        sort: this.callConfigMethod('sort', searchDefinition, options),\n        limit: options.search.limit,\n        skip: options.search.skip,\n        fields: this.callConfigMethod('fields', searchDefinition, options)\n      };\n    }\n\n    return getFindOptions;\n  })();\n\n  /**\n   * Return the reactive search cursor.\n   *\n   * @param {String} searchDefinition Search definition\n   * @param {Object} options          Search and index options\n   */\n\n  MongoDBEngine.prototype.getSearchCursor = (function () {\n    function getSearchCursor(searchDefinition, options) {\n      var selector = this.callConfigMethod('selector', searchDefinition, options, this.config.aggregation),\n          findOptions = this.getFindOptions(searchDefinition, options),\n          collection = options.index.collection;\n\n      check(options, Object);\n      check(selector, Object);\n      check(findOptions, Object);\n\n      return new Cursor(collection.find(selector, findOptions), collection.find(selector).count());\n    }\n\n    return getSearchCursor;\n  })();\n\n  return MongoDBEngine;\n})(ReactiveEngine);","ast":null,"map":{"version":3,"sources":["/lib/engines/mongo-db.js"],"names":[],"mappings":";;;;;;AAMA,aAAa;wBAAS,aAAa;;WAAb,aAAa;sCAAb,aAAa;;;;;;;;;;;AAAb,eAAa,WAMjC,oBAAoB;AAAA,oCAAG;AACrB,aAAO,CAAC,CAAC,QAAQ,CAAC,EAAE,EAAE,aAAa,CAAC,yBAAyB,CAAC,IAAI,CAAC,EAAE,0BAAM,oBAAoB,KAAA,MAAE,CAAC,CAAC;KACpG;;;;;;;;;;;;;AARmB,eAAa,CAiB1B,yBAAyB;AAAA,uCAAC,WAAW,EAAE;AAC5C,aAAO;AACL,mBAAW,EAAE,KAAK;AAClB,gBAAQ,EAAA,UAAC,YAAY,EAAE,OAAO,EAAE,WAAW,EAAE;AAC3C,cAAI,QAAQ,GAAG,EAAE,CAAC;;AAElB,kBAAQ,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC;;AAE3B,WAAC,CAAC,IAAI,CAAC,YAAY,EAAE,UAAC,YAAY,EAAE,KAAK,EAAK;AAC5C,gBAAI,aAAa,GAAG,WAAW,CAAC,gBAAgB,CAC9C,kBAAkB,EAAE,KAAK,EAAE,YAAY,EAAE,OAAO,CACjD,CAAC;;AAEF,gBAAI,aAAa,EAAE;AACjB,sBAAQ,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;aAC3C;WACF,CAAC,CAAC;;AAEH,iBAAO,QAAQ,CAAC;SACjB;AACD,wBAAgB,EAAA,UAAC,KAAK,EAAE,YAAY,EAAE;AACpC,cAAI,QAAQ,GAAG,EAAE,CAAC;;AAElB,kBAAQ,CAAC,KAAK,CAAC,GAAG,EAAE,QAAQ,SAAQ,YAAY,OAAI,EAAE,UAAU,EAAG,GAAG,EAAC,CAAC;;AAExE,iBAAO,QAAQ,CAAA;SAChB;AACD,YAAI,EAAA,UAAC,YAAY,EAAE,OAAO,EAAE;AAC1B,iBAAO,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC;SAC7B;OACF,CAAC;KACH;;;;;;;;;;;;AAhDmB,eAAa,WAwDjC,cAAc;AAAA,4BAAC,gBAAgB,EAAE,OAAO,EAAE;AACxC,aAAO;AACL,YAAI,EAAE,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,gBAAgB,EAAE,OAAO,CAAC;AAC9D,aAAK,EAAE,OAAO,CAAC,MAAM,CAAC,KAAK;AAC3B,YAAI,EAAE,OAAO,CAAC,MAAM,CAAC,IAAI;AACzB,cAAM,EAAE,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE,gBAAgB,EAAE,OAAO,CAAC;OACnE,CAAC;KACH;;;;;;;;;;;;AA/DmB,eAAa,WAuEjC,eAAe;AAAA,6BAAC,gBAAgB,EAAE,OAAO,EAAE;AACzC,UAAI,QAAQ,GAAG,IAAI,CAAC,gBAAgB,CAAC,UAAU,EAAE,gBAAgB,EAAE,OAAO,EAAE,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC;UAClG,WAAW,GAAG,IAAI,CAAC,cAAc,CAAC,gBAAgB,EAAE,OAAO,CAAC;UAC5D,UAAU,GAAG,OAAO,CAAC,KAAK,CAAC,UAAU,CAAC;;AAExC,WAAK,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;AACvB,WAAK,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;AACxB,WAAK,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;;AAE3B,aAAO,IAAI,MAAM,CACf,UAAU,CAAC,IAAI,CAAC,QAAQ,EAAE,WAAW,CAAC,EACtC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,KAAK,EAAE,CAClC,CAAC;KACH;;;;;SApFmB,aAAa;GAAS,cAAc,CAqFzD,CAAC","file":"/lib/engines/mongo-db.js.map","sourcesContent":["/**\n * The MongoDBEngine lets you search the index on the server side with MongoDB. Subscriptions and publications\n * are handled within the Engine.\n *\n * @type {MongoDBEngine}\n */\nMongoDBEngine = class MongoDBEngine extends ReactiveEngine {\n  /**\n   * Return default configuration.\n   *\n   * @returns {Object}\n   */\n  defaultConfiguration() {\n    return _.defaults({}, MongoDBEngine.defaultMongoConfiguration(this), super.defaultConfiguration());\n  }\n\n  /**\n   * Default mongo configuration, used in constructor and MinimongoEngine to get the configuration.\n   *\n   * @param {Object} engineScope Scope of the engine\n   *\n   * @returns {Object}\n   */\n  static defaultMongoConfiguration(engineScope) {\n    return {\n      aggregation: '$or',\n      selector(searchObject, options, aggregation) {\n        let selector = {};\n\n        selector[aggregation] = [];\n\n        _.each(searchObject, (searchString, field) => {\n          let fieldSelector = engineScope.callConfigMethod(\n            'selectorPerField', field, searchString, options\n          );\n\n          if (fieldSelector) {\n            selector[aggregation].push(fieldSelector);\n          }\n        });\n\n        return selector;\n      },\n      selectorPerField(field, searchString) {\n        let selector = {};\n\n        selector[field] = { '$regex' : `.*${searchString}.*`, '$options' : 'i'};\n\n        return selector\n      },\n      sort(searchObject, options) {\n        return options.index.fields;\n      }\n    };\n  }\n\n  /**\n   * Return the find options for the mongo find query.\n   *\n   * @param {String} searchDefinition Search definition\n   * @param {Object} options          Search and index options\n   */\n  getFindOptions(searchDefinition, options) {\n    return {\n      sort: this.callConfigMethod('sort', searchDefinition, options),\n      limit: options.search.limit,\n      skip: options.search.skip,\n      fields: this.callConfigMethod('fields', searchDefinition, options)\n    };\n  }\n\n  /**\n   * Return the reactive search cursor.\n   *\n   * @param {String} searchDefinition Search definition\n   * @param {Object} options          Search and index options\n   */\n  getSearchCursor(searchDefinition, options) {\n    let selector = this.callConfigMethod('selector', searchDefinition, options, this.config.aggregation),\n      findOptions = this.getFindOptions(searchDefinition, options),\n      collection = options.index.collection;\n\n    check(options, Object);\n    check(selector, Object);\n    check(findOptions, Object);\n\n    return new Cursor(\n      collection.find(selector, findOptions),\n      collection.find(selector).count()\n    );\n  }\n};\n"]},"hash":"adaaba446c8c51c5a9601bbc2bf86103381a9c25"}
