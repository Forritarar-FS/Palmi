{"metadata":{"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}},"usedHelpers":["inherits","class-call-check"]},"ignored":false,"code":"/**\n * The MongoTextIndexEngine lets you search the index with Mongo text indexes.\n *\n * @type {MongoTextIndexEngine}\n */\nMongoTextIndexEngine = (function (_ReactiveEngine) {\n  babelHelpers.inherits(MongoTextIndexEngine, _ReactiveEngine);\n\n  function MongoTextIndexEngine() {\n    babelHelpers.classCallCheck(this, MongoTextIndexEngine);\n\n    _ReactiveEngine.apply(this, arguments);\n  }\n\n  /**\n   * Return default configuration.\n   *\n   * @returns {Object}\n   */\n\n  MongoTextIndexEngine.prototype.defaultConfiguration = (function () {\n    function defaultConfiguration() {\n      var mongoConfiguration = MongoDBEngine.defaultMongoConfiguration(this);\n\n      mongoConfiguration.selector = function (searchString) {\n        if (searchString.trim()) {\n          return { $text: { $search: searchString } };\n        }\n\n        return {};\n      };\n\n      return _.defaults({}, mongoConfiguration, _ReactiveEngine.prototype.defaultConfiguration.call(this));\n    }\n\n    return defaultConfiguration;\n  })();\n\n  /**\n   * Setup the index on creation.\n   *\n   * @param {Object} indexConfig Index configuration\n   */\n\n  MongoTextIndexEngine.prototype.onIndexCreate = (function () {\n    function onIndexCreate(indexConfig) {\n      _ReactiveEngine.prototype.onIndexCreate.call(this, indexConfig);\n\n      if (Meteor.isServer) {\n        (function () {\n          var textIndexesConfig = {};\n\n          _.each(indexConfig.fields, function (field) {\n            textIndexesConfig[field] = 'text';\n          });\n\n          if (indexConfig.weights) {\n            textIndexesConfig.weights = options.weights();\n          }\n\n          indexConfig.collection._ensureIndex(textIndexesConfig);\n        })();\n      }\n    }\n\n    return onIndexCreate;\n  })();\n\n  /**\n   * Transform the search definition.\n   *\n   * @param {String|Object} searchDefinition Search definition\n   * @param {Object}        options          Search and index options\n   *\n   * @returns {Object}\n   */\n\n  MongoTextIndexEngine.prototype.transformSearchDefinition = (function () {\n    function transformSearchDefinition(searchDefinition, options) {\n      return searchDefinition;\n    }\n\n    return transformSearchDefinition;\n  })();\n\n  /**\n   * Check the given search parameter for validity\n   *\n   * @param search\n   */\n\n  MongoTextIndexEngine.prototype.checkSearchParam = (function () {\n    function checkSearchParam(search) {\n      check(search, String);\n    }\n\n    return checkSearchParam;\n  })();\n\n  return MongoTextIndexEngine;\n})(ReactiveEngine);\n\n// Explicitely inherit getSearchCursor method functionality\nMongoTextIndexEngine.prototype.getSearchCursor = MongoDBEngine.prototype.getSearchCursor;\nMongoTextIndexEngine.prototype.getFindOptions = MongoDBEngine.prototype.getFindOptions;","ast":null,"map":{"version":3,"sources":["/lib/engines/mongo-text-index.js"],"names":[],"mappings":";;;;;AAKA,oBAAoB;wBAAS,oBAAoB;;WAApB,oBAAoB;sCAApB,oBAAoB;;;;;;;;;;;AAApB,sBAAoB,WAM/C,oBAAoB;AAAA,oCAAG;AACrB,UAAI,kBAAkB,GAAG,aAAa,CAAC,yBAAyB,CAAC,IAAI,CAAC,CAAC;;AAEvE,wBAAkB,CAAC,QAAQ,GAAG,UAAU,YAAY,EAAE;AACpD,YAAI,YAAY,CAAC,IAAI,EAAE,EAAE;AACvB,iBAAO,EAAE,KAAK,EAAE,EAAE,OAAO,EAAE,YAAY,EAAE,EAAE,CAAC;SAC7C;;AAED,eAAO,EAAE,CAAC;OACX,CAAC;;AAEF,aAAO,CAAC,CAAC,QAAQ,CAAC,EAAE,EAAE,kBAAkB,EAAE,0BAAM,oBAAoB,KAAA,MAAE,CAAC,CAAC;KACzE;;;;;;;;;;;AAlB0B,sBAAoB,WAyB/C,aAAa;AAAA,2BAAC,WAAW,EAAE;AACzB,gCAAM,aAAa,KAAA,OAAC,WAAW,CAAC,CAAC;;AAEjC,UAAI,MAAM,CAAC,QAAQ,EAAE;;AACnB,cAAI,iBAAiB,GAAG,EAAE,CAAC;;AAE3B,WAAC,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,UAAU,KAAK,EAAE;AAC1C,6BAAiB,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC;WACnC,CAAC,CAAC;;AAEH,cAAI,WAAW,CAAC,OAAO,EAAE;AACvB,6BAAiB,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,EAAE,CAAC;WAC/C;;AAED,qBAAW,CAAC,UAAU,CAAC,YAAY,CAAC,iBAAiB,CAAC,CAAC;;OACxD;KACF;;;;;;;;;;;;;;AAzC0B,sBAAoB,WAmD/C,yBAAyB;AAAA,uCAAC,gBAAgB,EAAE,OAAO,EAAE;AACnD,aAAO,gBAAgB,CAAC;KACzB;;;;;;;;;;;AArD0B,sBAAoB,WA4D/C,gBAAgB;AAAA,8BAAC,MAAM,EAAE;AACvB,WAAK,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;KACvB;;;;;SA9D0B,oBAAoB;GAAS,cAAc,CA+DvE,CAAC;;;AAGF,oBAAoB,CAAC,SAAS,CAAC,eAAe,GAAG,aAAa,CAAC,SAAS,CAAC,eAAe,CAAC;AACzF,oBAAoB,CAAC,SAAS,CAAC,cAAc,GAAG,aAAa,CAAC,SAAS,CAAC,cAAc,CAAC","file":"/lib/engines/mongo-text-index.js.map","sourcesContent":["/**\n * The MongoTextIndexEngine lets you search the index with Mongo text indexes.\n *\n * @type {MongoTextIndexEngine}\n */\nMongoTextIndexEngine = class MongoTextIndexEngine extends ReactiveEngine {\n  /**\n   * Return default configuration.\n   *\n   * @returns {Object}\n   */\n  defaultConfiguration() {\n    let mongoConfiguration = MongoDBEngine.defaultMongoConfiguration(this);\n\n    mongoConfiguration.selector = function (searchString) {\n      if (searchString.trim()) {\n        return { $text: { $search: searchString } };\n      }\n\n      return {};\n    };\n\n    return _.defaults({}, mongoConfiguration, super.defaultConfiguration());\n  }\n\n  /**\n   * Setup the index on creation.\n   *\n   * @param {Object} indexConfig Index configuration\n   */\n  onIndexCreate(indexConfig) {\n    super.onIndexCreate(indexConfig);\n\n    if (Meteor.isServer) {\n      let textIndexesConfig = {};\n\n      _.each(indexConfig.fields, function (field) {\n        textIndexesConfig[field] = 'text';\n      });\n\n      if (indexConfig.weights) {\n        textIndexesConfig.weights = options.weights();\n      }\n\n      indexConfig.collection._ensureIndex(textIndexesConfig);\n    }\n  }\n\n  /**\n   * Transform the search definition.\n   *\n   * @param {String|Object} searchDefinition Search definition\n   * @param {Object}        options          Search and index options\n   *\n   * @returns {Object}\n   */\n  transformSearchDefinition(searchDefinition, options) {\n    return searchDefinition;\n  }\n\n  /**\n   * Check the given search parameter for validity\n   *\n   * @param search\n   */\n  checkSearchParam(search) {\n    check(search, String);\n  }\n};\n\n// Explicitely inherit getSearchCursor method functionality\nMongoTextIndexEngine.prototype.getSearchCursor = MongoDBEngine.prototype.getSearchCursor;\nMongoTextIndexEngine.prototype.getFindOptions = MongoDBEngine.prototype.getFindOptions;\n"]},"hash":"75049c36083d34b725c31df7a1cf9dc58c2030fe"}
