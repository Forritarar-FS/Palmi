{"metadata":{"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}},"usedHelpers":["create-class","class-call-check"]},"ignored":false,"code":"/**\n * An Index represents the main entry point for searching with EasySearch. It relies on\n * the given engine to have the search functionality and defines the data that should be searchable.\n *\n * @type {Index}\n */\nIndex = (function () {\n  /**\n   * Constructor\n   *\n   * @param {Object} config Configuration\n   *\n   * @constructor\n   */\n\n  function Index(config) {\n    babelHelpers.classCallCheck(this, Index);\n\n    check(config, Object);\n    check(config.collection, Meteor.Collection);\n    check(config.fields, [String]);\n\n    if (!(config.engine instanceof Engine)) {\n      throw new Meteor.Error('invalid-engine', 'engine needs to be instanceof Engine');\n    }\n\n    if (!config.name) config.name = (config.collection._name || '').toLowerCase();\n\n    this.config = _.extend(Index.defaultConfiguration, config);\n    this.defaultSearchOptions = _.defaults({}, this.config.defaultSearchOptions, { limit: 10, skip: 0, props: {} });\n\n    // Engine specific code on index creation\n    config.engine.onIndexCreate(this.config);\n  }\n\n  /**\n   * Default configuration for an index.\n   *\n   * @returns {Object}\n   */\n\n  /**\n   * Search the index.\n   *\n   * @param {Object|String} searchDefinition Search definition\n   * @param {Object}        options          Options\n   *\n   * @returns {Cursor}\n   */\n\n  Index.prototype.search = (function () {\n    function search(searchDefinition) {\n      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n      this.config.engine.checkSearchParam(searchDefinition, this.config);\n\n      check(options, {\n        limit: Match.Optional(Number),\n        skip: Match.Optional(Number),\n        props: Match.Optional(Object)\n      });\n\n      options = {\n        search: this._getSearchOptions(options),\n        index: this.config\n      };\n\n      if (!this.config.permission(options.search)) {\n        throw new Meteor.Error('not-allowed', \"You're not allowed to search this index!\");\n      }\n\n      return this.config.engine.search(searchDefinition, options);\n    }\n\n    return search;\n  })();\n\n  /**\n   * Returns the search options based on the given options.\n   *\n   * @param {Object} options Options to use\n   *\n   * @returns {Object}\n   */\n\n  Index.prototype._getSearchOptions = (function () {\n    function _getSearchOptions(options) {\n      return _.defaults(Meteor.userId ? { userId: Meteor.userId() } : {}, options, this.defaultSearchOptions);\n    }\n\n    return _getSearchOptions;\n  })();\n\n  babelHelpers.createClass(Index, null, [{\n    key: 'defaultConfiguration',\n    get: function () {\n      return {\n        permission: function () {\n          return true;\n        },\n        defaultSearchOptions: {}\n      };\n    }\n  }]);\n  return Index;\n})();","ast":null,"map":{"version":3,"sources":["/lib/core/index.js"],"names":[],"mappings":";;;;;;AAMA,KAAK;;;;;;;;;AAQQ,WARC,KAAK,CAQL,MAAM,EAAE;sCARR,KAAK;;AASf,SAAK,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AACtB,SAAK,CAAC,MAAM,CAAC,UAAU,EAAE,MAAM,CAAC,UAAU,CAAC,CAAC;AAC5C,SAAK,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;;AAE/B,QAAI,EAAE,MAAM,CAAC,MAAM,YAAY,MAAM,CAAA,AAAC,EAAE;AACtC,YAAM,IAAI,MAAM,CAAC,KAAK,CAAC,gBAAgB,EAAE,sCAAsC,CAAC,CAAC;KAClF;;AAED,QAAI,CAAC,MAAM,CAAC,IAAI,EACd,MAAM,CAAC,IAAI,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,IAAI,EAAE,CAAA,CAAE,WAAW,EAAE,CAAC;;AAE9D,QAAI,CAAC,MAAM,GAAG,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,oBAAoB,EAAE,MAAM,CAAC,CAAC;AAC3D,QAAI,CAAC,oBAAoB,GAAG,CAAC,CAAC,QAAQ,CAAC,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,oBAAoB,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,IAAI,EAAE,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC,CAAC;;;AAGhH,UAAM,CAAC,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;GAC1C;;;;;;;;;;;;;;;;;AAzBW,OAAK,WA+CjB,MAAM;AAAA,oBAAC,gBAAgB,EAAgB;UAAd,OAAO,yDAAG,EAAE;;AACnC,UAAI,CAAC,MAAM,CAAC,MAAM,CAAC,gBAAgB,CAAC,gBAAgB,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;;AAEnE,WAAK,CAAC,OAAO,EAAE;AACb,aAAK,EAAE,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC;AAC7B,YAAI,EAAE,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC;AAC5B,aAAK,EAAE,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC;OAC9B,CAAC,CAAC;;AAEH,aAAO,GAAG;AACR,cAAM,EAAE,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC;AACvC,aAAK,EAAE,IAAI,CAAC,MAAM;OACnB,CAAC;;AAEF,UAAI,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;AAC3C,cAAM,IAAI,MAAM,CAAC,KAAK,CAAC,aAAa,EAAE,0CAA0C,CAAC,CAAC;OACnF;;AAED,aAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,gBAAgB,EAAE,OAAO,CAAC,CAAC;KAC7D;;;;;;;;;;;;;AAlEW,OAAK,WA2EjB,iBAAiB;AAAA,+BAAC,OAAO,EAAE;AACzB,aAAO,CAAC,CAAC,QAAQ,CAAG,MAAM,CAAC,MAAM,GAAG,EAAE,MAAM,EAAE,MAAM,CAAC,MAAM,EAAE,EAAE,GAAG,EAAE,EAAI,OAAO,EAAE,IAAI,CAAC,oBAAoB,CAAC,CAAC;KAC7G;;;;;2BA7EW,KAAK;;SAgCc,YAAG;AAChC,aAAO;AACL,kBAAU,EAAE;iBAAM,IAAI;SAAA;AACtB,4BAAoB,EAAE,EAAE;OACzB,CAAC;KACH;;SArCW,KAAK;IA8ElB,CAAC","file":"/lib/core/index.js.map","sourcesContent":["/**\n * An Index represents the main entry point for searching with EasySearch. It relies on\n * the given engine to have the search functionality and defines the data that should be searchable.\n *\n * @type {Index}\n */\nIndex = class Index {\n  /**\n   * Constructor\n   *\n   * @param {Object} config Configuration\n   *\n   * @constructor\n   */\n  constructor(config) {\n    check(config, Object);\n    check(config.collection, Meteor.Collection);\n    check(config.fields, [String]);\n\n    if (!(config.engine instanceof Engine)) {\n      throw new Meteor.Error('invalid-engine', 'engine needs to be instanceof Engine');\n    }\n\n    if (!config.name)\n      config.name = (config.collection._name || '').toLowerCase();\n\n    this.config = _.extend(Index.defaultConfiguration, config);\n    this.defaultSearchOptions = _.defaults({}, this.config.defaultSearchOptions, { limit: 10, skip: 0, props: {} });\n\n    // Engine specific code on index creation\n    config.engine.onIndexCreate(this.config);\n  }\n\n  /**\n   * Default configuration for an index.\n   *\n   * @returns {Object}\n   */\n  static get defaultConfiguration() {\n    return {\n      permission: () => true,\n      defaultSearchOptions: {}\n    };\n  }\n\n  /**\n   * Search the index.\n   *\n   * @param {Object|String} searchDefinition Search definition\n   * @param {Object}        options          Options\n   *\n   * @returns {Cursor}\n   */\n  search(searchDefinition, options = {}) {\n    this.config.engine.checkSearchParam(searchDefinition, this.config);\n\n    check(options, {\n      limit: Match.Optional(Number),\n      skip: Match.Optional(Number),\n      props: Match.Optional(Object)\n    });\n\n    options = {\n      search: this._getSearchOptions(options),\n      index: this.config\n    };\n\n    if (!this.config.permission(options.search)) {\n      throw new Meteor.Error('not-allowed', \"You're not allowed to search this index!\");\n    }\n\n    return this.config.engine.search(searchDefinition, options);\n  }\n\n  /**\n   * Returns the search options based on the given options.\n   *\n   * @param {Object} options Options to use\n   *\n   * @returns {Object}\n   */\n  _getSearchOptions(options) {\n    return _.defaults(( Meteor.userId ? { userId: Meteor.userId() } : {} ), options, this.defaultSearchOptions);\n  }\n};\n"]},"hash":"4be2e0e787aed0dd95cc37b2204674c6690ae988"}
