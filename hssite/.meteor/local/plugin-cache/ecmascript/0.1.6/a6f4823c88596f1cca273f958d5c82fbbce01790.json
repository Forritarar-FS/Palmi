{"metadata":{"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}},"usedHelpers":[]},"ignored":false,"code":"EasySearch._getComponentMethods = function (dict, index) {\n  return {\n    /**\n     * Search a component for the given search string.\n     *\n     * @param {Object|String} searchDefinition Search definition\n     */\n    search: function (searchDefinition) {\n      dict.set('searchOptions', {\n        props: (dict.get('searchOptions') || {}).props\n      });\n\n      dict.set('searchDefinition', searchDefinition);\n      dict.set('stopPublication', true);\n    },\n    /**\n     * Return the EasySearch.Cursor for the current search.\n     *\n     * @returns {Cursor}\n     */\n    getCursor: function () {\n      var searchDefinition = dict.get('searchDefinition') || '',\n          options = dict.get('searchOptions');\n\n      check(options, Match.Optional(Object));\n\n      var cursor = index.search(searchDefinition, options),\n          searchOptions = index._getSearchOptions(options);\n\n      dict.set('count', cursor.count());\n      dict.set('searching', !cursor.isReady());\n      dict.set('limit', searchOptions.limit);\n      dict.set('skip', searchOptions.skip);\n      dict.set('currentCount', cursor.mongoCursor.count());\n      dict.set('stopPublication', false);\n\n      return cursor;\n    },\n    /**\n     * Return true if the current search string is empty.\n     *\n     * @returns {boolean}\n     */\n    searchIsEmpty: function () {\n      var searchDefinition = dict.get('searchDefinition');\n\n      return !searchDefinition || _.isString(searchDefinition) && 0 === searchDefinition.trim().length;\n    },\n    /**\n     * Return true if the component has no results.\n     *\n     * @returns {boolean}\n     */\n    hasNoResults: function () {\n      var count = dict.get('count');\n\n      return !_.isNumber(count) || 0 === count;\n    },\n    /**\n     * Return true if the component is being searched.\n     *\n     * @returns {boolean}\n     */\n    isSearching: function () {\n      return !!dict.get('searching');\n    },\n    /**\n     * Return true if the component has more documents than displayed right now.\n     *\n     * @returns {boolean}\n     */\n    hasMoreDocuments: function () {\n      return dict.get('currentCount') < dict.get('count');\n    },\n    /**\n     * Load more documents for the component.\n     *\n     * @param {Number} count Count of docs\n     */\n    loadMore: function (count) {\n      check(count, Number);\n\n      var currentCount = dict.get('currentCount'),\n          options = dict.get('searchOptions') || {};\n\n      options.limit = currentCount + count;\n      dict.set('searchOptions', options);\n    },\n    /**\n     * Paginate through documents for the given page.\n     *\n     * @param {Number} page Page number\n     */\n    paginate: function (page) {\n      check(page, Number);\n\n      var options = dict.get('searchOptions') || {},\n          limit = dict.get('limit');\n\n      options.skip = limit * (page - 1);\n      dict.set('searchOptions', options);\n      dict.set('stopPublication', true);\n    },\n    /**\n     * Add custom properties for search.\n     */\n    addProps: function () {\n      var options = dict.get('searchOptions') || {};\n\n      options.props = options.props || {};\n\n      if (_.isObject(arguments[0])) {\n        options.props = _.extend(options.props, arguments[0]);\n      } else if (_.isString(arguments[0]) && _.isString(arguments[1])) {\n        options.props[arguments[0]] = arguments[1];\n      }\n\n      dict.set('searchOptions', options);\n    },\n    /**\n     * Remove custom properties for search.\n     */\n    removeProps: function () {\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      var options = dict.get('searchOptions') || {};\n\n      if (!_.isEmpty(args)) {\n        options.props = _.omit(options.props, args) || {};\n      } else {\n        options.props = {};\n      }\n\n      dict.set('searchOptions', options);\n    }\n  };\n};","ast":null,"map":{"version":3,"sources":["/lib/component-methods.js"],"names":[],"mappings":"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","file":"/lib/component-methods.js.map","sourcesContent":["EasySearch._getComponentMethods = function (dict, index) {\n  return {\n    /**\n     * Search a component for the given search string.\n     *\n     * @param {Object|String} searchDefinition Search definition\n     */\n    search: (searchDefinition) => {\n      dict.set('searchOptions', {\n        props: (dict.get('searchOptions') || {}).props\n      });\n\n      dict.set('searchDefinition', searchDefinition);\n      dict.set('stopPublication', true);\n    },\n    /**\n     * Return the EasySearch.Cursor for the current search.\n     *\n     * @returns {Cursor}\n     */\n    getCursor: () => {\n      let searchDefinition = dict.get('searchDefinition') || '',\n        options = dict.get('searchOptions');\n\n      check(options, Match.Optional(Object));\n\n      let cursor = index.search(searchDefinition, options),\n        searchOptions = index._getSearchOptions(options);\n\n      dict.set('count', cursor.count());\n      dict.set('searching', !cursor.isReady());\n      dict.set('limit', searchOptions.limit);\n      dict.set('skip', searchOptions.skip);\n      dict.set('currentCount', cursor.mongoCursor.count());\n      dict.set('stopPublication', false);\n\n      return cursor;\n    },\n    /**\n     * Return true if the current search string is empty.\n     *\n     * @returns {boolean}\n     */\n    searchIsEmpty: () => {\n      let searchDefinition = dict.get('searchDefinition');\n\n      return !searchDefinition || (_.isString(searchDefinition) && 0 === searchDefinition.trim().length);\n    },\n    /**\n     * Return true if the component has no results.\n     *\n     * @returns {boolean}\n     */\n    hasNoResults: () => {\n      let count = dict.get('count');\n\n      return !_.isNumber(count) || 0 === count;\n    },\n    /**\n     * Return true if the component is being searched.\n     *\n     * @returns {boolean}\n     */\n    isSearching: () => {\n      return !!dict.get('searching');\n    },\n    /**\n     * Return true if the component has more documents than displayed right now.\n     *\n     * @returns {boolean}\n     */\n    hasMoreDocuments: () => {\n      return dict.get('currentCount') < dict.get('count');\n    },\n    /**\n     * Load more documents for the component.\n     *\n     * @param {Number} count Count of docs\n     */\n    loadMore: (count) => {\n      check(count, Number);\n\n      let currentCount = dict.get('currentCount'),\n        options = dict.get('searchOptions') || {};\n\n      options.limit = currentCount + count;\n      dict.set('searchOptions', options);\n    },\n    /**\n     * Paginate through documents for the given page.\n     *\n     * @param {Number} page Page number\n     */\n    paginate: (page) => {\n      check(page, Number);\n\n      let options = dict.get('searchOptions') || {},\n        limit = dict.get('limit');\n\n      options.skip = limit * (page - 1);\n      dict.set('searchOptions', options);\n      dict.set('stopPublication', true);\n    },\n    /**\n     * Add custom properties for search.\n     */\n    addProps: (...args) => {\n      let options = dict.get('searchOptions') || {};\n\n      options.props = options.props || {};\n\n      if (_.isObject(args[0])) {\n        options.props = _.extend(options.props, args[0]);\n      } else if (_.isString(args[0]) && _.isString(args[1])) {\n        options.props[args[0]] = args[1];\n      }\n\n      dict.set('searchOptions', options);\n    },\n    /**\n     * Remove custom properties for search.\n     */\n    removeProps: (...args) => {\n      let options = dict.get('searchOptions') || {};\n\n      if (!_.isEmpty(args)) {\n        options.props = _.omit(options.props, args) || {};\n      } else {\n        options.props = {};\n      }\n\n      dict.set('searchOptions', options);\n    }\n  };\n};\n"]},"hash":"a6f4823c88596f1cca273f958d5c82fbbce01790"}
