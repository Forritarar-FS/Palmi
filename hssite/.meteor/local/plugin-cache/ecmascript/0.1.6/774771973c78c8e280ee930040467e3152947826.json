{"metadata":{"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}},"usedHelpers":["inherits","class-call-check"]},"ignored":false,"code":"/**\n * The MinimongEngine lets you search the index on the client-side.\n *\n * @type {MinimongoEngine}\n */\nMinimongoEngine = (function (_Engine) {\n  babelHelpers.inherits(MinimongoEngine, _Engine);\n\n  function MinimongoEngine() {\n    babelHelpers.classCallCheck(this, MinimongoEngine);\n\n    _Engine.apply(this, arguments);\n  }\n\n  /**\n   * Return default configuration.\n   *\n   * @returns {Object}\n   */\n\n  MinimongoEngine.prototype.defaultConfiguration = (function () {\n    function defaultConfiguration() {\n      return _.defaults({}, MongoDBEngine.defaultMongoConfiguration(this), _Engine.prototype.defaultConfiguration.call(this));\n    }\n\n    return defaultConfiguration;\n  })();\n\n  /**\n   * Search the index.\n   *\n   * @param {Object} searchDefinition Search definition\n   * @param {Object} options          Object of options\n   *\n   * @returns {cursor}\n   */\n\n  MinimongoEngine.prototype.search = (function () {\n    function search(searchDefinition, options) {\n      if (!Meteor.isClient) {\n        throw new Meteor.Error('only-client', 'Minimongo can only be used on the client');\n      }\n\n      searchDefinition = this.transformSearchDefinition(searchDefinition, options);\n\n      // check() calls are in getSearchCursor method\n      return MongoDBEngine.prototype.getSearchCursor.apply(this, [searchDefinition, options]);\n    }\n\n    return search;\n  })();\n\n  return MinimongoEngine;\n})(Engine);\n\nMinimongoEngine.prototype.checkSearchParam = ReactiveEngine.prototype.checkSearchParam;\nMinimongoEngine.prototype.transformSearchDefinition = ReactiveEngine.prototype.transformSearchDefinition;\n\nMinimongoEngine.prototype.getFindOptions = function () {\n  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  var findOptions = MongoDBEngine.prototype.getFindOptions.apply(this, args);\n\n  findOptions.transform = this.config.transform;\n\n  return findOptions;\n};","ast":null,"map":{"version":3,"sources":["/lib/engines/minimongo.js"],"names":[],"mappings":";;;;;AAKA,eAAe;wBAAS,eAAe;;WAAf,eAAe;sCAAf,eAAe;;;;;;;;;;;AAAf,iBAAe,WAMrC,oBAAoB;AAAA,oCAAG;AACrB,aAAO,CAAC,CAAC,QAAQ,CAAC,EAAE,EAAE,aAAa,CAAC,yBAAyB,CAAC,IAAI,CAAC,EAAE,kBAAM,oBAAoB,KAAA,MAAE,CAAC,CAAC;KACpG;;;;;;;;;;;;;;AARqB,iBAAe,WAkBrC,MAAM;AAAA,oBAAC,gBAAgB,EAAE,OAAO,EAAE;AAChC,UAAI,CAAC,MAAM,CAAC,QAAQ,EAAE;AACpB,cAAM,IAAI,MAAM,CAAC,KAAK,CAAC,aAAa,EAAE,0CAA0C,CAAC,CAAC;OACnF;;AAED,sBAAgB,GAAG,IAAI,CAAC,yBAAyB,CAAC,gBAAgB,EAAE,OAAO,CAAC,CAAC;;;AAG7E,aAAO,aAAa,CAAC,SAAS,CAAC,eAAe,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,gBAAgB,EAAE,OAAO,CAAC,CAAC,CAAC;KACzF;;;;;SA3BqB,eAAe;GAAS,MAAM,CA4BrD,CAAC;;AAEF,eAAe,CAAC,SAAS,CAAC,gBAAgB,GAAG,cAAc,CAAC,SAAS,CAAC,gBAAgB,CAAC;AACvF,eAAe,CAAC,SAAS,CAAC,yBAAyB,GAAG,cAAc,CAAC,SAAS,CAAC,yBAAyB,CAAC;;AAEzG,eAAe,CAAC,SAAS,CAAC,cAAc,GAAG,YAAmB;oCAAN,IAAI;AAAJ,QAAI;;;AAC1D,MAAI,WAAW,GAAG,aAAa,CAAC,SAAS,CAAC,cAAc,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;;AAE3E,aAAW,CAAC,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC;;AAE9C,SAAO,WAAW,CAAC;CACpB,CAAC","file":"/lib/engines/minimongo.js.map","sourcesContent":["/**\n * The MinimongEngine lets you search the index on the client-side.\n *\n * @type {MinimongoEngine}\n */\nMinimongoEngine = class MinimongoEngine extends Engine {\n  /**\n   * Return default configuration.\n   *\n   * @returns {Object}\n   */\n  defaultConfiguration() {\n    return _.defaults({}, MongoDBEngine.defaultMongoConfiguration(this), super.defaultConfiguration());\n  }\n\n  /**\n   * Search the index.\n   *\n   * @param {Object} searchDefinition Search definition\n   * @param {Object} options          Object of options\n   *\n   * @returns {cursor}\n   */\n  search(searchDefinition, options) {\n    if (!Meteor.isClient) {\n      throw new Meteor.Error('only-client', 'Minimongo can only be used on the client');\n    }\n\n    searchDefinition = this.transformSearchDefinition(searchDefinition, options);\n\n    // check() calls are in getSearchCursor method\n    return MongoDBEngine.prototype.getSearchCursor.apply(this, [searchDefinition, options]);\n  }\n};\n\nMinimongoEngine.prototype.checkSearchParam = ReactiveEngine.prototype.checkSearchParam;\nMinimongoEngine.prototype.transformSearchDefinition = ReactiveEngine.prototype.transformSearchDefinition;\n\nMinimongoEngine.prototype.getFindOptions = function (...args) {\n  let findOptions = MongoDBEngine.prototype.getFindOptions.apply(this, args);\n\n  findOptions.transform = this.config.transform;\n\n  return findOptions;\n};\n"]},"hash":"774771973c78c8e280ee930040467e3152947826"}
