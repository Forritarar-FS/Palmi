[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar ECMAScript = Package.ecmascript.ECMAScript;\nvar Mongo = Package.mongo.Mongo;\nvar _ = Package.underscore._;\nvar babelHelpers = Package['babel-runtime'].babelHelpers;\nvar Symbol = Package['ecmascript-runtime'].Symbol;\nvar Map = Package['ecmascript-runtime'].Map;\nvar Set = Package['ecmascript-runtime'].Set;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar Index, Engine, ReactiveEngine, Cursor, SearchCollection, MongoDBEngine, MinimongoEngine, MongoTextIndexEngine, EasySearch;\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/easysearch_core/lib/core/index.js                                                                        //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\n/**                                                                                                                  //\n * An Index represents the main entry point for searching with EasySearch. It relies on                              //\n * the given engine to have the search functionality and defines the data that should be searchable.                 //\n *                                                                                                                   //\n * @type {Index}                                                                                                     //\n */                                                                                                                  //\nIndex = (function () {                                                                                               // 7\n  /**                                                                                                                //\n   * Constructor                                                                                                     //\n   *                                                                                                                 //\n   * @param {Object} config Configuration                                                                            //\n   *                                                                                                                 //\n   * @constructor                                                                                                    //\n   */                                                                                                                //\n                                                                                                                     //\n  function Index(config) {                                                                                           // 15\n    babelHelpers.classCallCheck(this, Index);                                                                        //\n                                                                                                                     //\n    check(config, Object);                                                                                           // 16\n    check(config.collection, Meteor.Collection);                                                                     // 17\n    check(config.fields, [String]);                                                                                  // 18\n                                                                                                                     //\n    if (!(config.engine instanceof Engine)) {                                                                        // 20\n      throw new Meteor.Error('invalid-engine', 'engine needs to be instanceof Engine');                              // 21\n    }                                                                                                                //\n                                                                                                                     //\n    if (!config.name) config.name = (config.collection._name || '').toLowerCase();                                   // 24\n                                                                                                                     //\n    this.config = _.extend(Index.defaultConfiguration, config);                                                      // 27\n    this.defaultSearchOptions = _.defaults({}, this.config.defaultSearchOptions, { limit: 10, skip: 0, props: {} });\n                                                                                                                     //\n    // Engine specific code on index creation                                                                        //\n    config.engine.onIndexCreate(this.config);                                                                        // 31\n  }                                                                                                                  //\n                                                                                                                     //\n  /**                                                                                                                //\n   * Default configuration for an index.                                                                             //\n   *                                                                                                                 //\n   * @returns {Object}                                                                                               //\n   */                                                                                                                //\n                                                                                                                     //\n  /**                                                                                                                //\n   * Search the index.                                                                                               //\n   *                                                                                                                 //\n   * @param {Object|String} searchDefinition Search definition                                                       //\n   * @param {Object}        options          Options                                                                 //\n   *                                                                                                                 //\n   * @returns {Cursor}                                                                                               //\n   */                                                                                                                //\n                                                                                                                     //\n  Index.prototype.search = (function () {                                                                            // 7\n    function search(searchDefinition) {                                                                              // 54\n      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];                         //\n                                                                                                                     //\n      this.config.engine.checkSearchParam(searchDefinition, this.config);                                            // 55\n                                                                                                                     //\n      check(options, {                                                                                               // 57\n        limit: Match.Optional(Number),                                                                               // 58\n        skip: Match.Optional(Number),                                                                                // 59\n        props: Match.Optional(Object)                                                                                // 60\n      });                                                                                                            //\n                                                                                                                     //\n      options = {                                                                                                    // 63\n        search: this._getSearchOptions(options),                                                                     // 64\n        index: this.config                                                                                           // 65\n      };                                                                                                             //\n                                                                                                                     //\n      if (!this.config.permission(options.search)) {                                                                 // 68\n        throw new Meteor.Error('not-allowed', \"You're not allowed to search this index!\");                           // 69\n      }                                                                                                              //\n                                                                                                                     //\n      return this.config.engine.search(searchDefinition, options);                                                   // 72\n    }                                                                                                                //\n                                                                                                                     //\n    return search;                                                                                                   //\n  })();                                                                                                              //\n                                                                                                                     //\n  /**                                                                                                                //\n   * Returns the search options based on the given options.                                                          //\n   *                                                                                                                 //\n   * @param {Object} options Options to use                                                                          //\n   *                                                                                                                 //\n   * @returns {Object}                                                                                               //\n   */                                                                                                                //\n                                                                                                                     //\n  Index.prototype._getSearchOptions = (function () {                                                                 // 7\n    function _getSearchOptions(options) {                                                                            // 82\n      return _.defaults(Meteor.userId ? { userId: Meteor.userId() } : {}, options, this.defaultSearchOptions);       // 83\n    }                                                                                                                //\n                                                                                                                     //\n    return _getSearchOptions;                                                                                        //\n  })();                                                                                                              //\n                                                                                                                     //\n  babelHelpers.createClass(Index, null, [{                                                                           //\n    key: 'defaultConfiguration',                                                                                     //\n    get: function () {                                                                                               //\n      return {                                                                                                       // 40\n        permission: function () {                                                                                    // 41\n          return true;                                                                                               //\n        },                                                                                                           //\n        defaultSearchOptions: {}                                                                                     // 42\n      };                                                                                                             //\n    }                                                                                                                //\n  }]);                                                                                                               //\n  return Index;                                                                                                      //\n})();                                                                                                                //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/easysearch_core/lib/core/engine.js                                                                       //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\n/**                                                                                                                  //\n * An Engine is the technology used for searching with EasySearch, with                                              //\n * customizable configuration to how it interacts with the data from the Index.                                      //\n *                                                                                                                   //\n * @type {Engine}                                                                                                    //\n */                                                                                                                  //\nEngine = (function () {                                                                                              // 7\n  /**                                                                                                                //\n   * Constructor                                                                                                     //\n   *                                                                                                                 //\n   * @param {Object} config configuration                                                                            //\n   *                                                                                                                 //\n   * @constructor                                                                                                    //\n   */                                                                                                                //\n                                                                                                                     //\n  function Engine() {                                                                                                // 15\n    var config = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];                            //\n    babelHelpers.classCallCheck(this, Engine);                                                                       //\n                                                                                                                     //\n    if (this.constructor === Engine) {                                                                               // 16\n      throw new Error('Cannot initialize instance of Engine');                                                       // 17\n    }                                                                                                                //\n                                                                                                                     //\n    if (!_.isFunction(this.search)) {                                                                                // 20\n      throw new Error('Engine needs to implement search method');                                                    // 21\n    }                                                                                                                //\n                                                                                                                     //\n    this.config = _.defaults({}, config, this.defaultConfiguration());                                               // 24\n  }                                                                                                                  //\n                                                                                                                     //\n  /**                                                                                                                //\n   * Return default configuration.                                                                                   //\n   *                                                                                                                 //\n   * @returns {Object}                                                                                               //\n   */                                                                                                                //\n                                                                                                                     //\n  Engine.prototype.defaultConfiguration = (function () {                                                             // 7\n    function defaultConfiguration() {                                                                                // 32\n      return {};                                                                                                     // 33\n    }                                                                                                                //\n                                                                                                                     //\n    return defaultConfiguration;                                                                                     //\n  })();                                                                                                              //\n                                                                                                                     //\n  /**                                                                                                                //\n   * Call a configuration method with the engine scope.                                                              //\n   *                                                                                                                 //\n   * @param {String} methodName Method name                                                                          //\n   * @param {Object} args       Arguments for the method                                                             //\n   *                                                                                                                 //\n   * @returns {*}                                                                                                    //\n   */                                                                                                                //\n                                                                                                                     //\n  Engine.prototype.callConfigMethod = (function () {                                                                 // 7\n    function callConfigMethod(methodName) {                                                                          // 44\n      check(methodName, String);                                                                                     // 45\n                                                                                                                     //\n      var func = this.config[methodName];                                                                            // 47\n                                                                                                                     //\n      if (func) {                                                                                                    // 49\n        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {    //\n          args[_key - 1] = arguments[_key];                                                                          // 44\n        }                                                                                                            //\n                                                                                                                     //\n        return func.apply(this, args);                                                                               // 50\n      }                                                                                                              //\n    }                                                                                                                //\n                                                                                                                     //\n    return callConfigMethod;                                                                                         //\n  })();                                                                                                              //\n                                                                                                                     //\n  /**                                                                                                                //\n   * Check the given search parameter for validity                                                                   //\n   *                                                                                                                 //\n   * @param search                                                                                                   //\n   */                                                                                                                //\n                                                                                                                     //\n  Engine.prototype.checkSearchParam = (function () {                                                                 // 7\n    function checkSearchParam(search) {                                                                              // 59\n      check(search, String);                                                                                         // 60\n    }                                                                                                                //\n                                                                                                                     //\n    return checkSearchParam;                                                                                         //\n  })();                                                                                                              //\n                                                                                                                     //\n  /**                                                                                                                //\n   *Code to run on index creation                                                                                    //\n   *                                                                                                                 //\n   * @param {Object} indexConfig Index configuraction                                                                //\n   */                                                                                                                //\n                                                                                                                     //\n  Engine.prototype.onIndexCreate = (function () {                                                                    // 7\n    function onIndexCreate(indexConfig) {                                                                            // 68\n      if (!indexConfig.allowedFields) {                                                                              // 69\n        indexConfig.allowedFields = indexConfig.fields;                                                              // 70\n      }                                                                                                              //\n    }                                                                                                                //\n                                                                                                                     //\n    return onIndexCreate;                                                                                            //\n  })();                                                                                                              //\n                                                                                                                     //\n  return Engine;                                                                                                     //\n})();                                                                                                                //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/easysearch_core/lib/core/reactive-engine.js                                                              //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\n/**                                                                                                                  //\n * A ReactiveEngine handles the reactive logic, such as subscribing                                                  //\n * and publishing documents into a self contained collection.                                                        //\n *                                                                                                                   //\n * @type {ReactiveEngine}                                                                                            //\n */                                                                                                                  //\nReactiveEngine = (function (_Engine) {                                                                               // 7\n  babelHelpers.inherits(ReactiveEngine, _Engine);                                                                    //\n                                                                                                                     //\n  /**                                                                                                                //\n   * Constructor.                                                                                                    //\n   *                                                                                                                 //\n   * @param {Object} config Configuration                                                                            //\n   *                                                                                                                 //\n   * @constructor                                                                                                    //\n   */                                                                                                                //\n                                                                                                                     //\n  function ReactiveEngine(config) {                                                                                  // 15\n    babelHelpers.classCallCheck(this, ReactiveEngine);                                                               //\n                                                                                                                     //\n    _Engine.call(this, config);                                                                                      // 16\n                                                                                                                     //\n    if (this === this.constructor) {                                                                                 // 18\n      throw new Error('Cannot initialize instance of ReactiveEngine');                                               // 19\n    }                                                                                                                //\n                                                                                                                     //\n    if (!_.isFunction(this.getSearchCursor)) {                                                                       // 22\n      throw new Error('Reactive engine needs to implement getSearchCursor method');                                  // 23\n    }                                                                                                                //\n  }                                                                                                                  //\n                                                                                                                     //\n  /**                                                                                                                //\n   * Return default configuration.                                                                                   //\n   *                                                                                                                 //\n   * @returns {Object}                                                                                               //\n   */                                                                                                                //\n                                                                                                                     //\n  ReactiveEngine.prototype.defaultConfiguration = (function () {                                                     // 7\n    function defaultConfiguration() {                                                                                // 32\n      return _.defaults({}, {                                                                                        // 33\n        transform: function (doc) {                                                                                  // 34\n          return doc;                                                                                                //\n        },                                                                                                           //\n        beforePublish: function (event, doc) {                                                                       // 35\n          return doc;                                                                                                //\n        }                                                                                                            //\n      }, _Engine.prototype.defaultConfiguration.call(this));                                                         //\n    }                                                                                                                //\n                                                                                                                     //\n    return defaultConfiguration;                                                                                     //\n  })();                                                                                                              //\n                                                                                                                     //\n  /**                                                                                                                //\n   * Code to run on index creation                                                                                   //\n   *                                                                                                                 //\n   * @param {Object} indexConfig Index configuration                                                                 //\n   */                                                                                                                //\n                                                                                                                     //\n  ReactiveEngine.prototype.onIndexCreate = (function () {                                                            // 7\n    function onIndexCreate(indexConfig) {                                                                            // 44\n      _Engine.prototype.onIndexCreate.call(this, indexConfig);                                                       // 45\n      indexConfig.searchCollection = new SearchCollection(indexConfig, this);                                        // 46\n      indexConfig.mongoCollection = indexConfig.searchCollection._collection;                                        // 47\n    }                                                                                                                //\n                                                                                                                     //\n    return onIndexCreate;                                                                                            //\n  })();                                                                                                              //\n                                                                                                                     //\n  /**                                                                                                                //\n   * Transform the search definition.                                                                                //\n   *                                                                                                                 //\n   * @param {String|Object} searchDefinition Search definition                                                       //\n   * @param {Object}        options          Search and index options                                                //\n   *                                                                                                                 //\n   * @returns {Object}                                                                                               //\n   */                                                                                                                //\n                                                                                                                     //\n  ReactiveEngine.prototype.transformSearchDefinition = (function () {                                                // 7\n    function transformSearchDefinition(searchDefinition, options) {                                                  // 58\n      if (_.isString(searchDefinition)) {                                                                            // 59\n        (function () {                                                                                               //\n          var obj = {};                                                                                              // 60\n                                                                                                                     //\n          _.each(options.index.fields, function (field) {                                                            // 62\n            obj[field] = searchDefinition;                                                                           // 63\n          });                                                                                                        //\n                                                                                                                     //\n          searchDefinition = obj;                                                                                    // 66\n        })();                                                                                                        //\n      }                                                                                                              //\n                                                                                                                     //\n      return searchDefinition;                                                                                       // 69\n    }                                                                                                                //\n                                                                                                                     //\n    return transformSearchDefinition;                                                                                //\n  })();                                                                                                              //\n                                                                                                                     //\n  /**                                                                                                                //\n   * Check the given search parameter for validity                                                                   //\n   *                                                                                                                 //\n   * @param search                                                                                                   //\n   * @param indexOptions                                                                                             //\n   */                                                                                                                //\n                                                                                                                     //\n  ReactiveEngine.prototype.checkSearchParam = (function () {                                                         // 7\n    function checkSearchParam(search, indexOptions) {                                                                // 78\n      check(search, Match.OneOf(String, Object));                                                                    // 79\n                                                                                                                     //\n      if (_.isObject(search)) {                                                                                      // 81\n        _.each(search, function (val, field) {                                                                       // 82\n          check(val, String);                                                                                        // 83\n                                                                                                                     //\n          if (-1 === _.indexOf(indexOptions.allowedFields, field)) {                                                 // 85\n            throw new Meteor.Error('Not allowed to search over field \"' + field + '\"');                              // 86\n          }                                                                                                          //\n        });                                                                                                          //\n      }                                                                                                              //\n    }                                                                                                                //\n                                                                                                                     //\n    return checkSearchParam;                                                                                         //\n  })();                                                                                                              //\n                                                                                                                     //\n  /**                                                                                                                //\n   * Reactively search on the collection.                                                                            //\n   *                                                                                                                 //\n   * @param {Object} searchDefinition Search definition                                                              //\n   * @param {Object} options          Options                                                                        //\n   *                                                                                                                 //\n   * @returns {Cursor}                                                                                               //\n   */                                                                                                                //\n                                                                                                                     //\n  ReactiveEngine.prototype.search = (function () {                                                                   // 7\n    function search(searchDefinition, options) {                                                                     // 100\n      if (Meteor.isClient) {                                                                                         // 101\n        return options.index.searchCollection.find(searchDefinition, options.search);                                // 102\n      } else {                                                                                                       //\n        return this.getSearchCursor(this.transformSearchDefinition(searchDefinition, options), options);             // 104\n      }                                                                                                              //\n    }                                                                                                                //\n                                                                                                                     //\n    return search;                                                                                                   //\n  })();                                                                                                              //\n                                                                                                                     //\n  return ReactiveEngine;                                                                                             //\n})(Engine);                                                                                                          //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/easysearch_core/lib/core/cursor.js                                                                       //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\n/**                                                                                                                  //\n * A Cursor represents a pointer to the search results. Since it's specific                                          //\n * to EasySearch it can also be used to check for valid return values.                                               //\n *                                                                                                                   //\n * @type {Cursor}                                                                                                    //\n */                                                                                                                  //\nCursor = (function () {                                                                                              // 7\n  /**                                                                                                                //\n   * Constructor                                                                                                     //\n   *                                                                                                                 //\n   * @param {Mongo.Cursor} mongoCursor Referenced mongo cursor                                                       //\n   * @param {Number}       count       Count of all documents found                                                  //\n   * @param {Boolean}      isReady     Cursor is ready                                                               //\n   *                                                                                                                 //\n   * @constructor                                                                                                    //\n   *                                                                                                                 //\n   */                                                                                                                //\n                                                                                                                     //\n  function Cursor(mongoCursor, count) {                                                                              // 18\n    var isReady = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];                         //\n    var publishHandle = arguments.length <= 3 || arguments[3] === undefined ? null : arguments[3];                   //\n    babelHelpers.classCallCheck(this, Cursor);                                                                       //\n                                                                                                                     //\n    check(mongoCursor.fetch, Function);                                                                              // 19\n    check(count, Number);                                                                                            // 20\n    check(isReady, Match.Optional(Boolean));                                                                         // 21\n    check(publishHandle, Match.OneOf(null, Object));                                                                 // 22\n                                                                                                                     //\n    this._mongoCursor = mongoCursor;                                                                                 // 24\n    this._count = count;                                                                                             // 25\n    this._isReady = isReady;                                                                                         // 26\n    this._publishHandle = publishHandle;                                                                             // 27\n  }                                                                                                                  //\n                                                                                                                     //\n  /**                                                                                                                //\n   * Fetch the search results.                                                                                       //\n   *                                                                                                                 //\n   * @returns {[Object]}                                                                                             //\n   */                                                                                                                //\n                                                                                                                     //\n  Cursor.prototype.fetch = (function () {                                                                            // 7\n    function fetch() {                                                                                               // 35\n      return this._mongoCursor.fetch();                                                                              // 36\n    }                                                                                                                //\n                                                                                                                     //\n    return fetch;                                                                                                    //\n  })();                                                                                                              //\n                                                                                                                     //\n  /**                                                                                                                //\n   * Stop the subscription handle associated with the cursor.                                                        //\n   */                                                                                                                //\n                                                                                                                     //\n  Cursor.prototype.stop = (function () {                                                                             // 7\n    function stop() {                                                                                                // 42\n      if (this._publishHandle) {                                                                                     // 43\n        return this._publishHandle.stop();                                                                           // 44\n      }                                                                                                              //\n    }                                                                                                                //\n                                                                                                                     //\n    return stop;                                                                                                     //\n  })();                                                                                                              //\n                                                                                                                     //\n  /**                                                                                                                //\n   * Return count of all documents found                                                                             //\n   *                                                                                                                 //\n   * @returns {Number}                                                                                               //\n   */                                                                                                                //\n                                                                                                                     //\n  Cursor.prototype.count = (function () {                                                                            // 7\n    function count() {                                                                                               // 53\n      return this._count;                                                                                            // 54\n    }                                                                                                                //\n                                                                                                                     //\n    return count;                                                                                                    //\n  })();                                                                                                              //\n                                                                                                                     //\n  /**                                                                                                                //\n   * Return if the cursor is ready.                                                                                  //\n   *                                                                                                                 //\n   * @returns {Boolean}                                                                                              //\n   */                                                                                                                //\n                                                                                                                     //\n  Cursor.prototype.isReady = (function () {                                                                          // 7\n    function isReady() {                                                                                             // 62\n      return this._isReady;                                                                                          // 63\n    }                                                                                                                //\n                                                                                                                     //\n    return isReady;                                                                                                  //\n  })();                                                                                                              //\n                                                                                                                     //\n  /**                                                                                                                //\n   * Return the raw mongo cursor.                                                                                    //\n   *                                                                                                                 //\n   * @returns {Mongo.Cursor}                                                                                         //\n   */                                                                                                                //\n  babelHelpers.createClass(Cursor, [{                                                                                //\n    key: \"mongoCursor\",                                                                                              //\n    get: function () {                                                                                               //\n      return this._mongoCursor;                                                                                      // 72\n    }                                                                                                                //\n                                                                                                                     //\n    /**                                                                                                              //\n     * Return a fake empty cursor, without data.                                                                     //\n     *                                                                                                               //\n     * @returns {Object}                                                                                             //\n     */                                                                                                              //\n  }], [{                                                                                                             //\n    key: \"emptyCursor\",                                                                                              //\n    get: function () {                                                                                               //\n      return { fetch: function () {                                                                                  // 81\n          return [];                                                                                                 //\n        }, observe: function () {                                                                                    //\n          return { stop: function () {                                                                               // 81\n              return null;                                                                                           //\n            } };                                                                                                     //\n        } };                                                                                                         //\n    }                                                                                                                //\n  }]);                                                                                                               //\n  return Cursor;                                                                                                     //\n})();                                                                                                                //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/easysearch_core/lib/core/search-collection.js                                                            //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\n/**                                                                                                                  //\n * A search collection represents a reactive collection on the client,                                               //\n * which is used by the ReactiveEngine for searching.                                                                //\n *                                                                                                                   //\n * @type {SearchCollection}                                                                                          //\n */                                                                                                                  //\nSearchCollection = (function () {                                                                                    // 7\n  /**                                                                                                                //\n   * Constructor                                                                                                     //\n   *                                                                                                                 //\n   * @param {Object}         indexConfiguration Index configuration                                                  //\n   * @param {ReactiveEngine} engine             Reactive Engine                                                      //\n   *                                                                                                                 //\n   * @constructor                                                                                                    //\n   */                                                                                                                //\n                                                                                                                     //\n  function SearchCollection(indexConfiguration, engine) {                                                            // 16\n    babelHelpers.classCallCheck(this, SearchCollection);                                                             //\n                                                                                                                     //\n    check(indexConfiguration, Object);                                                                               // 17\n    check(indexConfiguration.name, Match.OneOf(String, null));                                                       // 18\n                                                                                                                     //\n    if (!(engine instanceof ReactiveEngine)) {                                                                       // 20\n      throw new Meteor.Error('invalid-engine', 'engine needs to be instanceof ReactiveEngine');                      // 21\n    }                                                                                                                //\n                                                                                                                     //\n    this._indexConfiguration = indexConfiguration;                                                                   // 24\n    this._name = indexConfiguration.name + '/easySearch';                                                            // 25\n    this._engine = engine;                                                                                           // 26\n                                                                                                                     //\n    if (Meteor.isClient) {                                                                                           // 28\n      this._collection = new Meteor.Collection(this._name);                                                          // 29\n    } else if (Meteor.isServer) {                                                                                    //\n      this._setUpPublication();                                                                                      // 31\n    }                                                                                                                //\n  }                                                                                                                  //\n                                                                                                                     //\n  /**                                                                                                                //\n   * Get name                                                                                                        //\n   *                                                                                                                 //\n   * @returns {String}                                                                                               //\n   */                                                                                                                //\n                                                                                                                     //\n  /**                                                                                                                //\n   * Find documents on the client.                                                                                   //\n   *                                                                                                                 //\n   * @param {Object} searchDefinition Search definition                                                              //\n   * @param {Object} options          Options                                                                        //\n   *                                                                                                                 //\n   * @returns {Cursor}                                                                                               //\n   */                                                                                                                //\n                                                                                                                     //\n  SearchCollection.prototype.find = (function () {                                                                   // 7\n    function find(searchDefinition, options) {                                                                       // 61\n      if (!Meteor.isClient) {                                                                                        // 62\n        throw new Error('find can only be used on client');                                                          // 63\n      }                                                                                                              //\n                                                                                                                     //\n      var publishHandle = Meteor.subscribe(this.name, searchDefinition, options);                                    // 66\n                                                                                                                     //\n      var count = this._getCount(searchDefinition);                                                                  // 68\n      var mongoCursor = this._getMongoCursor(searchDefinition, options);                                             // 69\n                                                                                                                     //\n      if (!_.isNumber(count)) {                                                                                      // 71\n        return new Cursor(mongoCursor, 0, false);                                                                    // 72\n      }                                                                                                              //\n                                                                                                                     //\n      return new Cursor(mongoCursor, count, true, publishHandle);                                                    // 75\n    }                                                                                                                //\n                                                                                                                     //\n    return find;                                                                                                     //\n  })();                                                                                                              //\n                                                                                                                     //\n  /**                                                                                                                //\n   * Get the count of the cursor.                                                                                    //\n   *                                                                                                                 //\n   * @params {Object} searchDefinition Search definition                                                             //\n   *                                                                                                                 //\n   * @returns {Cursor.count}                                                                                         //\n   *                                                                                                                 //\n   * @private                                                                                                        //\n   */                                                                                                                //\n                                                                                                                     //\n  SearchCollection.prototype._getCount = (function () {                                                              // 7\n    function _getCount(searchDefinition) {                                                                           // 87\n      var countDoc = this._collection.findOne('searchCount' + JSON.stringify(searchDefinition));                     // 88\n                                                                                                                     //\n      if (countDoc) {                                                                                                // 90\n        return countDoc.count;                                                                                       // 91\n      }                                                                                                              //\n    }                                                                                                                //\n                                                                                                                     //\n    return _getCount;                                                                                                //\n  })();                                                                                                              //\n                                                                                                                     //\n  /**                                                                                                                //\n   * Get the mongo cursor.                                                                                           //\n   *                                                                                                                 //\n   * @param {Object} searchDefinition Search definition                                                              //\n   * @param {Object} options          Search options                                                                 //\n   *                                                                                                                 //\n   * @returns {Cursor}                                                                                               //\n   * @private                                                                                                        //\n   */                                                                                                                //\n                                                                                                                     //\n  SearchCollection.prototype._getMongoCursor = (function () {                                                        // 7\n    function _getMongoCursor(searchDefinition, options) {                                                            // 104\n      var _this = this;                                                                                              //\n                                                                                                                     //\n      return this._collection.find({ __searchDefinition: JSON.stringify(searchDefinition), __searchOptions: JSON.stringify(options) }, {\n        transform: function (doc) {                                                                                  // 108\n          delete doc.__searchDefinition;                                                                             // 109\n          delete doc.__searchOptions;                                                                                // 110\n          delete doc.__sortPosition;                                                                                 // 111\n                                                                                                                     //\n          _this.engine.config.transform(doc);                                                                        // 113\n          return doc;                                                                                                // 114\n        },                                                                                                           //\n        sort: ['__sortPosition']                                                                                     // 116\n      });                                                                                                            //\n    }                                                                                                                //\n                                                                                                                     //\n    return _getMongoCursor;                                                                                          //\n  })();                                                                                                              //\n                                                                                                                     //\n  /**                                                                                                                //\n   * Return a unique document id for publication.                                                                    //\n   *                                                                                                                 //\n   * @param {Document} doc                                                                                           //\n   *                                                                                                                 //\n   * @returns string                                                                                                 //\n   */                                                                                                                //\n                                                                                                                     //\n  SearchCollection.prototype.generateId = (function () {                                                             // 7\n    function generateId(doc) {                                                                                       // 128\n      return doc._id + doc.__searchDefinition + doc.__searchOptions;                                                 // 129\n    }                                                                                                                //\n                                                                                                                     //\n    return generateId;                                                                                               //\n  })();                                                                                                              //\n                                                                                                                     //\n  /**                                                                                                                //\n   * Add custom fields to the given document                                                                         //\n   *                                                                                                                 //\n   * @param {Document} doc                                                                                           //\n   * @param {Object}   data                                                                                          //\n   * @returns {*}                                                                                                    //\n   */                                                                                                                //\n                                                                                                                     //\n  SearchCollection.prototype.addCustomFields = (function () {                                                        // 7\n    function addCustomFields(doc, data) {                                                                            // 139\n      _.forEach(data, function (val, key) {                                                                          // 140\n        doc['__' + key] = val;                                                                                       // 141\n      });                                                                                                            //\n                                                                                                                     //\n      return doc;                                                                                                    // 144\n    }                                                                                                                //\n                                                                                                                     //\n    return addCustomFields;                                                                                          //\n  })();                                                                                                              //\n                                                                                                                     //\n  /**                                                                                                                //\n   * Set up publication.                                                                                             //\n   *                                                                                                                 //\n   * @private                                                                                                        //\n   */                                                                                                                //\n                                                                                                                     //\n  SearchCollection.prototype._setUpPublication = (function () {                                                      // 7\n    function _setUpPublication() {                                                                                   // 152\n      var collectionScope = this,                                                                                    // 153\n          collectionName = this.name;                                                                                //\n                                                                                                                     //\n      Meteor.publish(collectionName, function (searchDefinition, options) {                                          // 156\n        var _this2 = this;                                                                                           //\n                                                                                                                     //\n        check(searchDefinition, Match.OneOf(String, Object));                                                        // 157\n        check(options, Object);                                                                                      // 158\n                                                                                                                     //\n        var definitionString = JSON.stringify(searchDefinition),                                                     // 160\n            optionsString = JSON.stringify(options);                                                                 //\n                                                                                                                     //\n        options.userId = this.userId;                                                                                // 163\n        options.publicationScope = this;                                                                             // 164\n                                                                                                                     //\n        if (!collectionScope._indexConfiguration.permission(options)) {                                              // 166\n          throw new Meteor.Error('not-allowed', \"You're not allowed to search this index!\");                         // 167\n        }                                                                                                            //\n                                                                                                                     //\n        collectionScope.engine.checkSearchParam(searchDefinition, collectionScope._indexConfiguration);              // 170\n                                                                                                                     //\n        var cursor = collectionScope.engine.search(searchDefinition, {                                               // 172\n          search: options,                                                                                           // 173\n          index: collectionScope._indexConfiguration                                                                 // 174\n        });                                                                                                          //\n                                                                                                                     //\n        this.added(collectionName, 'searchCount' + definitionString, { count: cursor.count() });                     // 177\n                                                                                                                     //\n        var resultsHandle = cursor.mongoCursor.observe({                                                             // 179\n          addedAt: function (doc, atIndex, before) {                                                                 // 180\n            doc = collectionScope.engine.config.beforePublish('addedAt', doc, atIndex, before);                      // 181\n            doc = collectionScope.addCustomFields(doc, {                                                             // 182\n              searchDefinition: definitionString,                                                                    // 183\n              searchOptions: optionsString,                                                                          // 184\n              sortPosition: atIndex,                                                                                 // 185\n              originalId: doc._id                                                                                    // 186\n            });                                                                                                      //\n                                                                                                                     //\n            _this2.added(collectionName, collectionScope.generateId(doc), doc);                                      // 189\n          },                                                                                                         //\n          changedAt: function (doc, oldDoc, atIndex) {                                                               // 191\n            doc = collectionScope.engine.config.beforePublish('changedAt', doc, oldDoc, atIndex);                    // 192\n            doc = collectionScope.addCustomFields(doc, {                                                             // 193\n              searchDefinition: definitionString,                                                                    // 194\n              searchOptions: optionsString,                                                                          // 195\n              sortPosition: atIndex,                                                                                 // 196\n              originalId: doc._id                                                                                    // 197\n            });                                                                                                      //\n                                                                                                                     //\n            _this2.changed(collectionName, collectionScope.generateId(doc), doc);                                    // 200\n          },                                                                                                         //\n          movedTo: function (doc, fromIndex, toIndex, before) {                                                      // 202\n            doc = collectionScope.engine.config.beforePublish('movedTo', doc, fromIndex, toIndex, before);           // 203\n            doc = collectionScope.addCustomFields(doc, {                                                             // 204\n              searchDefinition: definitionString,                                                                    // 205\n              searchOptions: optionsString,                                                                          // 206\n              sortPosition: toIndex                                                                                  // 207\n            });                                                                                                      //\n                                                                                                                     //\n            var beforeDoc = collectionScope._indexConfiguration.collection.findOne(before);                          // 210\n                                                                                                                     //\n            if (beforeDoc) {                                                                                         // 212\n              beforeDoc = collectionScope.addCustomFields(beforeDoc, {                                               // 213\n                searchDefinition: definitionString,                                                                  // 214\n                searchOptions: optionsString,                                                                        // 215\n                sortPosition: fromIndex                                                                              // 216\n              });                                                                                                    //\n              _this2.changed(collectionName, collectionScope.generateId(beforeDoc), beforeDoc);                      // 218\n            }                                                                                                        //\n                                                                                                                     //\n            _this2.changed(collectionName, collectionScope.generateId(doc), doc);                                    // 221\n          },                                                                                                         //\n          removedAt: function (doc, atIndex) {                                                                       // 223\n            doc = collectionScope.engine.config.beforePublish('removedAt', doc, atIndex);                            // 224\n            doc = collectionScope.addCustomFields(doc, { searchDefinition: definitionString, searchOptions: optionsString });\n            _this2.removed(collectionName, collectionScope.generateId(doc));                                         // 226\n          }                                                                                                          //\n        });                                                                                                          //\n                                                                                                                     //\n        this.onStop(function () {                                                                                    // 230\n          resultsHandle.stop();                                                                                      // 231\n        });                                                                                                          //\n                                                                                                                     //\n        this.ready();                                                                                                // 234\n      });                                                                                                            //\n    }                                                                                                                //\n                                                                                                                     //\n    return _setUpPublication;                                                                                        //\n  })();                                                                                                              //\n                                                                                                                     //\n  babelHelpers.createClass(SearchCollection, [{                                                                      //\n    key: 'name',                                                                                                     //\n    get: function () {                                                                                               //\n      return this._name;                                                                                             // 41\n    }                                                                                                                //\n                                                                                                                     //\n    /**                                                                                                              //\n     * Get engine                                                                                                    //\n     *                                                                                                               //\n     * @returns {ReactiveEngine}                                                                                     //\n     */                                                                                                              //\n  }, {                                                                                                               //\n    key: 'engine',                                                                                                   //\n    get: function () {                                                                                               //\n      return this._engine;                                                                                           // 50\n    }                                                                                                                //\n  }]);                                                                                                               //\n  return SearchCollection;                                                                                           //\n})();                                                                                                                //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/easysearch_core/lib/engines/mongo-db.js                                                                  //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\n/**                                                                                                                  //\n * The MongoDBEngine lets you search the index on the server side with MongoDB. Subscriptions and publications       //\n * are handled within the Engine.                                                                                    //\n *                                                                                                                   //\n * @type {MongoDBEngine}                                                                                             //\n */                                                                                                                  //\nMongoDBEngine = (function (_ReactiveEngine) {                                                                        // 7\n  babelHelpers.inherits(MongoDBEngine, _ReactiveEngine);                                                             //\n                                                                                                                     //\n  function MongoDBEngine() {                                                                                         //\n    babelHelpers.classCallCheck(this, MongoDBEngine);                                                                //\n                                                                                                                     //\n    _ReactiveEngine.apply(this, arguments);                                                                          //\n  }                                                                                                                  //\n                                                                                                                     //\n  /**                                                                                                                //\n   * Return default configuration.                                                                                   //\n   *                                                                                                                 //\n   * @returns {Object}                                                                                               //\n   */                                                                                                                //\n                                                                                                                     //\n  MongoDBEngine.prototype.defaultConfiguration = (function () {                                                      // 7\n    function defaultConfiguration() {                                                                                // 13\n      return _.defaults({}, MongoDBEngine.defaultMongoConfiguration(this), _ReactiveEngine.prototype.defaultConfiguration.call(this));\n    }                                                                                                                //\n                                                                                                                     //\n    return defaultConfiguration;                                                                                     //\n  })();                                                                                                              //\n                                                                                                                     //\n  /**                                                                                                                //\n   * Default mongo configuration, used in constructor and MinimongoEngine to get the configuration.                  //\n   *                                                                                                                 //\n   * @param {Object} engineScope Scope of the engine                                                                 //\n   *                                                                                                                 //\n   * @returns {Object}                                                                                               //\n   */                                                                                                                //\n                                                                                                                     //\n  MongoDBEngine.defaultMongoConfiguration = (function () {                                                           // 7\n    function defaultMongoConfiguration(engineScope) {                                                                // 24\n      return {                                                                                                       // 25\n        aggregation: '$or',                                                                                          // 26\n        selector: function (searchObject, options, aggregation) {                                                    // 27\n          var selector = {};                                                                                         // 28\n                                                                                                                     //\n          selector[aggregation] = [];                                                                                // 30\n                                                                                                                     //\n          _.each(searchObject, function (searchString, field) {                                                      // 32\n            var fieldSelector = engineScope.callConfigMethod('selectorPerField', field, searchString, options);      // 33\n                                                                                                                     //\n            if (fieldSelector) {                                                                                     // 37\n              selector[aggregation].push(fieldSelector);                                                             // 38\n            }                                                                                                        //\n          });                                                                                                        //\n                                                                                                                     //\n          return selector;                                                                                           // 42\n        },                                                                                                           //\n        selectorPerField: function (field, searchString) {                                                           // 44\n          var selector = {};                                                                                         // 45\n                                                                                                                     //\n          selector[field] = { '$regex': '.*' + searchString + '.*', '$options': 'i' };                               // 47\n                                                                                                                     //\n          return selector;                                                                                           // 49\n        },                                                                                                           //\n        sort: function (searchObject, options) {                                                                     // 51\n          return options.index.fields;                                                                               // 52\n        }                                                                                                            //\n      };                                                                                                             //\n    }                                                                                                                //\n                                                                                                                     //\n    return defaultMongoConfiguration;                                                                                //\n  })();                                                                                                              //\n                                                                                                                     //\n  /**                                                                                                                //\n   * Return the find options for the mongo find query.                                                               //\n   *                                                                                                                 //\n   * @param {String} searchDefinition Search definition                                                              //\n   * @param {Object} options          Search and index options                                                       //\n   */                                                                                                                //\n                                                                                                                     //\n  MongoDBEngine.prototype.getFindOptions = (function () {                                                            // 7\n    function getFindOptions(searchDefinition, options) {                                                             // 63\n      return {                                                                                                       // 64\n        sort: this.callConfigMethod('sort', searchDefinition, options),                                              // 65\n        limit: options.search.limit,                                                                                 // 66\n        skip: options.search.skip,                                                                                   // 67\n        fields: this.callConfigMethod('fields', searchDefinition, options)                                           // 68\n      };                                                                                                             //\n    }                                                                                                                //\n                                                                                                                     //\n    return getFindOptions;                                                                                           //\n  })();                                                                                                              //\n                                                                                                                     //\n  /**                                                                                                                //\n   * Return the reactive search cursor.                                                                              //\n   *                                                                                                                 //\n   * @param {String} searchDefinition Search definition                                                              //\n   * @param {Object} options          Search and index options                                                       //\n   */                                                                                                                //\n                                                                                                                     //\n  MongoDBEngine.prototype.getSearchCursor = (function () {                                                           // 7\n    function getSearchCursor(searchDefinition, options) {                                                            // 78\n      var selector = this.callConfigMethod('selector', searchDefinition, options, this.config.aggregation),          // 79\n          findOptions = this.getFindOptions(searchDefinition, options),                                              //\n          collection = options.index.collection;                                                                     //\n                                                                                                                     //\n      check(options, Object);                                                                                        // 83\n      check(selector, Object);                                                                                       // 84\n      check(findOptions, Object);                                                                                    // 85\n                                                                                                                     //\n      return new Cursor(collection.find(selector, findOptions), collection.find(selector).count());                  // 87\n    }                                                                                                                //\n                                                                                                                     //\n    return getSearchCursor;                                                                                          //\n  })();                                                                                                              //\n                                                                                                                     //\n  return MongoDBEngine;                                                                                              //\n})(ReactiveEngine);                                                                                                  //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/easysearch_core/lib/engines/minimongo.js                                                                 //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\n/**                                                                                                                  //\n * The MinimongEngine lets you search the index on the client-side.                                                  //\n *                                                                                                                   //\n * @type {MinimongoEngine}                                                                                           //\n */                                                                                                                  //\nMinimongoEngine = (function (_Engine) {                                                                              // 6\n  babelHelpers.inherits(MinimongoEngine, _Engine);                                                                   //\n                                                                                                                     //\n  function MinimongoEngine() {                                                                                       //\n    babelHelpers.classCallCheck(this, MinimongoEngine);                                                              //\n                                                                                                                     //\n    _Engine.apply(this, arguments);                                                                                  //\n  }                                                                                                                  //\n                                                                                                                     //\n  /**                                                                                                                //\n   * Return default configuration.                                                                                   //\n   *                                                                                                                 //\n   * @returns {Object}                                                                                               //\n   */                                                                                                                //\n                                                                                                                     //\n  MinimongoEngine.prototype.defaultConfiguration = (function () {                                                    // 6\n    function defaultConfiguration() {                                                                                // 12\n      return _.defaults({}, MongoDBEngine.defaultMongoConfiguration(this), _Engine.prototype.defaultConfiguration.call(this));\n    }                                                                                                                //\n                                                                                                                     //\n    return defaultConfiguration;                                                                                     //\n  })();                                                                                                              //\n                                                                                                                     //\n  /**                                                                                                                //\n   * Search the index.                                                                                               //\n   *                                                                                                                 //\n   * @param {Object} searchDefinition Search definition                                                              //\n   * @param {Object} options          Object of options                                                              //\n   *                                                                                                                 //\n   * @returns {cursor}                                                                                               //\n   */                                                                                                                //\n                                                                                                                     //\n  MinimongoEngine.prototype.search = (function () {                                                                  // 6\n    function search(searchDefinition, options) {                                                                     // 24\n      if (!Meteor.isClient) {                                                                                        // 25\n        throw new Meteor.Error('only-client', 'Minimongo can only be used on the client');                           // 26\n      }                                                                                                              //\n                                                                                                                     //\n      searchDefinition = this.transformSearchDefinition(searchDefinition, options);                                  // 29\n                                                                                                                     //\n      // check() calls are in getSearchCursor method                                                                 //\n      return MongoDBEngine.prototype.getSearchCursor.apply(this, [searchDefinition, options]);                       // 32\n    }                                                                                                                //\n                                                                                                                     //\n    return search;                                                                                                   //\n  })();                                                                                                              //\n                                                                                                                     //\n  return MinimongoEngine;                                                                                            //\n})(Engine);                                                                                                          //\n                                                                                                                     //\nMinimongoEngine.prototype.checkSearchParam = ReactiveEngine.prototype.checkSearchParam;                              // 36\nMinimongoEngine.prototype.transformSearchDefinition = ReactiveEngine.prototype.transformSearchDefinition;            // 37\n                                                                                                                     //\nMinimongoEngine.prototype.getFindOptions = function () {                                                             // 39\n  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {                             //\n    args[_key] = arguments[_key];                                                                                    // 39\n  }                                                                                                                  //\n                                                                                                                     //\n  var findOptions = MongoDBEngine.prototype.getFindOptions.apply(this, args);                                        // 40\n                                                                                                                     //\n  findOptions.transform = this.config.transform;                                                                     // 42\n                                                                                                                     //\n  return findOptions;                                                                                                // 44\n};                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/easysearch_core/lib/engines/mongo-text-index.js                                                          //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\n/**                                                                                                                  //\n * The MongoTextIndexEngine lets you search the index with Mongo text indexes.                                       //\n *                                                                                                                   //\n * @type {MongoTextIndexEngine}                                                                                      //\n */                                                                                                                  //\nMongoTextIndexEngine = (function (_ReactiveEngine) {                                                                 // 6\n  babelHelpers.inherits(MongoTextIndexEngine, _ReactiveEngine);                                                      //\n                                                                                                                     //\n  function MongoTextIndexEngine() {                                                                                  //\n    babelHelpers.classCallCheck(this, MongoTextIndexEngine);                                                         //\n                                                                                                                     //\n    _ReactiveEngine.apply(this, arguments);                                                                          //\n  }                                                                                                                  //\n                                                                                                                     //\n  /**                                                                                                                //\n   * Return default configuration.                                                                                   //\n   *                                                                                                                 //\n   * @returns {Object}                                                                                               //\n   */                                                                                                                //\n                                                                                                                     //\n  MongoTextIndexEngine.prototype.defaultConfiguration = (function () {                                               // 6\n    function defaultConfiguration() {                                                                                // 12\n      var mongoConfiguration = MongoDBEngine.defaultMongoConfiguration(this);                                        // 13\n                                                                                                                     //\n      mongoConfiguration.selector = function (searchString) {                                                        // 15\n        if (searchString.trim()) {                                                                                   // 16\n          return { $text: { $search: searchString } };                                                               // 17\n        }                                                                                                            //\n                                                                                                                     //\n        return {};                                                                                                   // 20\n      };                                                                                                             //\n                                                                                                                     //\n      return _.defaults({}, mongoConfiguration, _ReactiveEngine.prototype.defaultConfiguration.call(this));          // 23\n    }                                                                                                                //\n                                                                                                                     //\n    return defaultConfiguration;                                                                                     //\n  })();                                                                                                              //\n                                                                                                                     //\n  /**                                                                                                                //\n   * Setup the index on creation.                                                                                    //\n   *                                                                                                                 //\n   * @param {Object} indexConfig Index configuration                                                                 //\n   */                                                                                                                //\n                                                                                                                     //\n  MongoTextIndexEngine.prototype.onIndexCreate = (function () {                                                      // 6\n    function onIndexCreate(indexConfig) {                                                                            // 31\n      _ReactiveEngine.prototype.onIndexCreate.call(this, indexConfig);                                               // 32\n                                                                                                                     //\n      if (Meteor.isServer) {                                                                                         // 34\n        (function () {                                                                                               //\n          var textIndexesConfig = {};                                                                                // 35\n                                                                                                                     //\n          _.each(indexConfig.fields, function (field) {                                                              // 37\n            textIndexesConfig[field] = 'text';                                                                       // 38\n          });                                                                                                        //\n                                                                                                                     //\n          if (indexConfig.weights) {                                                                                 // 41\n            textIndexesConfig.weights = options.weights();                                                           // 42\n          }                                                                                                          //\n                                                                                                                     //\n          indexConfig.collection._ensureIndex(textIndexesConfig);                                                    // 45\n        })();                                                                                                        //\n      }                                                                                                              //\n    }                                                                                                                //\n                                                                                                                     //\n    return onIndexCreate;                                                                                            //\n  })();                                                                                                              //\n                                                                                                                     //\n  /**                                                                                                                //\n   * Transform the search definition.                                                                                //\n   *                                                                                                                 //\n   * @param {String|Object} searchDefinition Search definition                                                       //\n   * @param {Object}        options          Search and index options                                                //\n   *                                                                                                                 //\n   * @returns {Object}                                                                                               //\n   */                                                                                                                //\n                                                                                                                     //\n  MongoTextIndexEngine.prototype.transformSearchDefinition = (function () {                                          // 6\n    function transformSearchDefinition(searchDefinition, options) {                                                  // 57\n      return searchDefinition;                                                                                       // 58\n    }                                                                                                                //\n                                                                                                                     //\n    return transformSearchDefinition;                                                                                //\n  })();                                                                                                              //\n                                                                                                                     //\n  /**                                                                                                                //\n   * Check the given search parameter for validity                                                                   //\n   *                                                                                                                 //\n   * @param search                                                                                                   //\n   */                                                                                                                //\n                                                                                                                     //\n  MongoTextIndexEngine.prototype.checkSearchParam = (function () {                                                   // 6\n    function checkSearchParam(search) {                                                                              // 66\n      check(search, String);                                                                                         // 67\n    }                                                                                                                //\n                                                                                                                     //\n    return checkSearchParam;                                                                                         //\n  })();                                                                                                              //\n                                                                                                                     //\n  return MongoTextIndexEngine;                                                                                       //\n})(ReactiveEngine);                                                                                                  //\n                                                                                                                     //\n// Explicitely inherit getSearchCursor method functionality                                                          //\nMongoTextIndexEngine.prototype.getSearchCursor = MongoDBEngine.prototype.getSearchCursor;                            // 72\nMongoTextIndexEngine.prototype.getFindOptions = MongoDBEngine.prototype.getFindOptions;                              // 73\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/easysearch_core/lib/globals.js                                                                           //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nEasySearch = {                                                                                                       // 1\n  // Core                                                                                                            //\n  Index: Index,                                                                                                      // 3\n  Engine: Engine,                                                                                                    // 4\n  ReactiveEngine: ReactiveEngine,                                                                                    // 5\n  Cursor: Cursor,                                                                                                    // 6\n  // Engines                                                                                                         //\n  MongoDB: MongoDBEngine,                                                                                            // 8\n  Minimongo: MinimongoEngine,                                                                                        // 9\n  MongoTextIndex: MongoTextIndexEngine                                                                               // 10\n};                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['easysearch:core'] = {\n  EasySearch: EasySearch\n};\n\n})();\n","servePath":"/packages/easysearch_core.js","sourceMap":{"version":3,"sources":["/lib/core/index.js","/lib/core/engine.js","/lib/core/reactive-engine.js","/lib/core/cursor.js","/lib/core/search-collection.js","/lib/engines/mongo-db.js","/lib/engines/minimongo.js","/lib/engines/mongo-text-index.js","/lib/globals.js"],"names":[],"mappings":"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","file":"/packages/easysearch_core.js","sourcesContent":["/**\n * An Index represents the main entry point for searching with EasySearch. It relies on\n * the given engine to have the search functionality and defines the data that should be searchable.\n *\n * @type {Index}\n */\nIndex = class Index {\n  /**\n   * Constructor\n   *\n   * @param {Object} config Configuration\n   *\n   * @constructor\n   */\n  constructor(config) {\n    check(config, Object);\n    check(config.collection, Meteor.Collection);\n    check(config.fields, [String]);\n\n    if (!(config.engine instanceof Engine)) {\n      throw new Meteor.Error('invalid-engine', 'engine needs to be instanceof Engine');\n    }\n\n    if (!config.name)\n      config.name = (config.collection._name || '').toLowerCase();\n\n    this.config = _.extend(Index.defaultConfiguration, config);\n    this.defaultSearchOptions = _.defaults({}, this.config.defaultSearchOptions, { limit: 10, skip: 0, props: {} });\n\n    // Engine specific code on index creation\n    config.engine.onIndexCreate(this.config);\n  }\n\n  /**\n   * Default configuration for an index.\n   *\n   * @returns {Object}\n   */\n  static get defaultConfiguration() {\n    return {\n      permission: () => true,\n      defaultSearchOptions: {}\n    };\n  }\n\n  /**\n   * Search the index.\n   *\n   * @param {Object|String} searchDefinition Search definition\n   * @param {Object}        options          Options\n   *\n   * @returns {Cursor}\n   */\n  search(searchDefinition, options = {}) {\n    this.config.engine.checkSearchParam(searchDefinition, this.config);\n\n    check(options, {\n      limit: Match.Optional(Number),\n      skip: Match.Optional(Number),\n      props: Match.Optional(Object)\n    });\n\n    options = {\n      search: this._getSearchOptions(options),\n      index: this.config\n    };\n\n    if (!this.config.permission(options.search)) {\n      throw new Meteor.Error('not-allowed', \"You're not allowed to search this index!\");\n    }\n\n    return this.config.engine.search(searchDefinition, options);\n  }\n\n  /**\n   * Returns the search options based on the given options.\n   *\n   * @param {Object} options Options to use\n   *\n   * @returns {Object}\n   */\n  _getSearchOptions(options) {\n    return _.defaults(( Meteor.userId ? { userId: Meteor.userId() } : {} ), options, this.defaultSearchOptions);\n  }\n};\n","/**\n * An Engine is the technology used for searching with EasySearch, with\n * customizable configuration to how it interacts with the data from the Index.\n *\n * @type {Engine}\n */\nEngine = class Engine {\n  /**\n   * Constructor\n   *\n   * @param {Object} config configuration\n   *\n   * @constructor\n   */\n  constructor(config = {}) {\n    if (this.constructor === Engine) {\n      throw new Error('Cannot initialize instance of Engine');\n    }\n\n    if (!_.isFunction(this.search)) {\n      throw new Error('Engine needs to implement search method');\n    }\n\n    this.config = _.defaults({}, config, this.defaultConfiguration());\n  }\n\n  /**\n   * Return default configuration.\n   *\n   * @returns {Object}\n   */\n  defaultConfiguration() {\n    return {};\n  }\n\n  /**\n   * Call a configuration method with the engine scope.\n   *\n   * @param {String} methodName Method name\n   * @param {Object} args       Arguments for the method\n   *\n   * @returns {*}\n   */\n  callConfigMethod(methodName, ...args) {\n    check(methodName, String);\n\n    let func = this.config[methodName];\n\n    if (func) {\n      return func.apply(this, args);\n    }\n  }\n\n  /**\n   * Check the given search parameter for validity\n   *\n   * @param search\n   */\n  checkSearchParam(search) {\n    check(search, String);\n  }\n\n  /**\n   *Code to run on index creation\n   *\n   * @param {Object} indexConfig Index configuraction\n   */\n  onIndexCreate(indexConfig) {\n    if (!indexConfig.allowedFields) {\n      indexConfig.allowedFields = indexConfig.fields;\n    }\n  }\n};\n","/**\n * A ReactiveEngine handles the reactive logic, such as subscribing\n * and publishing documents into a self contained collection.\n *\n * @type {ReactiveEngine}\n */\nReactiveEngine = class ReactiveEngine extends Engine {\n  /**\n   * Constructor.\n   *\n   * @param {Object} config Configuration\n   *\n   * @constructor\n   */\n  constructor(config) {\n    super(config);\n\n    if (this === this.constructor) {\n      throw new Error('Cannot initialize instance of ReactiveEngine');\n    }\n\n    if (!_.isFunction(this.getSearchCursor)) {\n      throw new Error('Reactive engine needs to implement getSearchCursor method');\n    }\n  }\n\n  /**\n   * Return default configuration.\n   *\n   * @returns {Object}\n   */\n  defaultConfiguration() {\n    return _.defaults({}, {\n      transform: (doc) => doc,\n      beforePublish: (event, doc) => doc\n    }, super.defaultConfiguration());\n  }\n\n  /**\n   * Code to run on index creation\n   *\n   * @param {Object} indexConfig Index configuration\n   */\n  onIndexCreate(indexConfig) {\n    super.onIndexCreate(indexConfig);\n    indexConfig.searchCollection = new SearchCollection(indexConfig, this);\n    indexConfig.mongoCollection = indexConfig.searchCollection._collection;\n  }\n\n  /**\n   * Transform the search definition.\n   *\n   * @param {String|Object} searchDefinition Search definition\n   * @param {Object}        options          Search and index options\n   *\n   * @returns {Object}\n   */\n  transformSearchDefinition(searchDefinition, options) {\n    if (_.isString(searchDefinition)) {\n      let obj = {};\n\n      _.each(options.index.fields, function (field) {\n        obj[field] = searchDefinition;\n      });\n\n      searchDefinition = obj;\n    }\n\n    return searchDefinition;\n  }\n\n  /**\n   * Check the given search parameter for validity\n   *\n   * @param search\n   * @param indexOptions\n   */\n  checkSearchParam(search, indexOptions) {\n    check(search, Match.OneOf(String, Object));\n\n    if (_.isObject(search)) {\n      _.each(search, function (val, field) {\n        check(val, String);\n\n        if (-1 === _.indexOf(indexOptions.allowedFields, field)) {\n          throw new Meteor.Error(`Not allowed to search over field \"${field}\"`);\n        }\n      });\n    }\n  }\n\n  /**\n   * Reactively search on the collection.\n   *\n   * @param {Object} searchDefinition Search definition\n   * @param {Object} options          Options\n   *\n   * @returns {Cursor}\n   */\n  search(searchDefinition, options) {\n    if (Meteor.isClient) {\n      return options.index.searchCollection.find(searchDefinition, options.search);\n    } else {\n      return this.getSearchCursor(\n        this.transformSearchDefinition(searchDefinition, options),\n        options\n      );\n    }\n  }\n};\n","/**\n * A Cursor represents a pointer to the search results. Since it's specific\n * to EasySearch it can also be used to check for valid return values.\n *\n * @type {Cursor}\n */\nCursor = class Cursor {\n  /**\n   * Constructor\n   *\n   * @param {Mongo.Cursor} mongoCursor Referenced mongo cursor\n   * @param {Number}       count       Count of all documents found\n   * @param {Boolean}      isReady     Cursor is ready\n   *\n   * @constructor\n   *\n   */\n  constructor(mongoCursor, count, isReady = true, publishHandle = null) {\n    check(mongoCursor.fetch, Function);\n    check(count, Number);\n    check(isReady, Match.Optional(Boolean));\n    check(publishHandle, Match.OneOf(null, Object));\n\n    this._mongoCursor = mongoCursor;\n    this._count = count;\n    this._isReady = isReady;\n    this._publishHandle = publishHandle;\n  }\n\n  /**\n   * Fetch the search results.\n   *\n   * @returns {[Object]}\n   */\n  fetch() {\n    return this._mongoCursor.fetch();\n  }\n\n /**\n  * Stop the subscription handle associated with the cursor.\n  */\n  stop() {\n    if (this._publishHandle) {\n      return this._publishHandle.stop();\n    }\n  }\n\n  /**\n   * Return count of all documents found\n   *\n   * @returns {Number}\n   */\n  count() {\n    return this._count;\n  }\n\n  /**\n   * Return if the cursor is ready.\n   *\n   * @returns {Boolean}\n   */\n  isReady() {\n    return this._isReady;\n  }\n\n  /**\n   * Return the raw mongo cursor.\n   *\n   * @returns {Mongo.Cursor}\n   */\n  get mongoCursor() {\n    return this._mongoCursor;\n  }\n\n  /**\n   * Return a fake empty cursor, without data.\n   *\n   * @returns {Object}\n   */\n  static get emptyCursor() {\n    return { fetch: () => [], observe: () => { return { stop: () => null }; } };\n  }\n};\n","/**\n * A search collection represents a reactive collection on the client,\n * which is used by the ReactiveEngine for searching.\n *\n * @type {SearchCollection}\n */\nSearchCollection = class SearchCollection {\n  /**\n   * Constructor\n   *\n   * @param {Object}         indexConfiguration Index configuration\n   * @param {ReactiveEngine} engine             Reactive Engine\n   *\n   * @constructor\n   */\n  constructor(indexConfiguration, engine) {\n    check(indexConfiguration, Object);\n    check(indexConfiguration.name, Match.OneOf(String, null));\n\n    if (!(engine instanceof ReactiveEngine)) {\n      throw new Meteor.Error('invalid-engine', 'engine needs to be instanceof ReactiveEngine');\n    }\n\n    this._indexConfiguration = indexConfiguration;\n    this._name = `${indexConfiguration.name}/easySearch`;\n    this._engine = engine;\n\n    if (Meteor.isClient) {\n      this._collection = new Meteor.Collection(this._name);\n    } else if (Meteor.isServer) {\n      this._setUpPublication();\n    }\n  }\n\n  /**\n   * Get name\n   *\n   * @returns {String}\n   */\n  get name() {\n    return this._name;\n  }\n\n  /**\n   * Get engine\n   *\n   * @returns {ReactiveEngine}\n   */\n  get engine() {\n    return this._engine;\n  }\n\n  /**\n   * Find documents on the client.\n   *\n   * @param {Object} searchDefinition Search definition\n   * @param {Object} options          Options\n   *\n   * @returns {Cursor}\n   */\n  find(searchDefinition, options) {\n    if (!Meteor.isClient) {\n      throw new Error('find can only be used on client');\n    }\n\n    let publishHandle = Meteor.subscribe(this.name, searchDefinition, options);\n\n    let count = this._getCount(searchDefinition);\n    let mongoCursor = this._getMongoCursor(searchDefinition, options);\n\n    if (!_.isNumber(count)) {\n      return new Cursor(mongoCursor, 0, false);\n    }\n\n    return new Cursor(mongoCursor, count, true, publishHandle);\n  }\n\n  /**\n   * Get the count of the cursor.\n   *\n   * @params {Object} searchDefinition Search definition\n   *\n   * @returns {Cursor.count}\n   *\n   * @private\n   */\n  _getCount(searchDefinition) {\n    let countDoc = this._collection.findOne('searchCount' + JSON.stringify(searchDefinition));\n\n    if (countDoc) {\n      return countDoc.count;\n    }\n  }\n\n  /**\n   * Get the mongo cursor.\n   *\n   * @param {Object} searchDefinition Search definition\n   * @param {Object} options          Search options\n   *\n   * @returns {Cursor}\n   * @private\n   */\n  _getMongoCursor(searchDefinition, options) {\n    return this._collection.find(\n      { __searchDefinition: JSON.stringify(searchDefinition), __searchOptions: JSON.stringify(options) },\n      {\n        transform: (doc) => {\n          delete doc.__searchDefinition;\n          delete doc.__searchOptions;\n          delete doc.__sortPosition;\n\n          this.engine.config.transform(doc);\n          return doc;\n        },\n        sort: ['__sortPosition']\n      }\n    );\n  }\n\n  /**\n   * Return a unique document id for publication.\n   *\n   * @param {Document} doc\n   *\n   * @returns string\n   */\n  generateId(doc) {\n    return doc._id + doc.__searchDefinition + doc.__searchOptions;\n  }\n\n  /**\n   * Add custom fields to the given document\n   *\n   * @param {Document} doc\n   * @param {Object}   data\n   * @returns {*}\n   */\n  addCustomFields(doc, data) {\n    _.forEach(data, function (val, key) {\n      doc['__' + key] = val;\n    });\n\n    return doc;\n  }\n\n  /**\n   * Set up publication.\n   *\n   * @private\n   */\n  _setUpPublication() {\n    var collectionScope = this,\n      collectionName = this.name;\n\n    Meteor.publish(collectionName, function (searchDefinition, options) {\n      check(searchDefinition, Match.OneOf(String, Object));\n      check(options, Object);\n\n      let definitionString = JSON.stringify(searchDefinition),\n        optionsString = JSON.stringify(options);\n\n      options.userId = this.userId;\n      options.publicationScope = this;\n\n      if (!collectionScope._indexConfiguration.permission(options)) {\n        throw new Meteor.Error('not-allowed', \"You're not allowed to search this index!\");\n      }\n\n      collectionScope.engine.checkSearchParam(searchDefinition, collectionScope._indexConfiguration);\n\n      let cursor = collectionScope.engine.search(searchDefinition, {\n        search: options,\n        index: collectionScope._indexConfiguration\n      });\n\n      this.added(collectionName, 'searchCount' + definitionString, { count: cursor.count() });\n\n      let resultsHandle = cursor.mongoCursor.observe({\n        addedAt: (doc, atIndex, before) => {\n          doc = collectionScope.engine.config.beforePublish('addedAt', doc, atIndex, before);\n          doc = collectionScope.addCustomFields(doc, {\n            searchDefinition: definitionString,\n            searchOptions: optionsString,\n            sortPosition: atIndex,\n            originalId: doc._id\n          });\n\n          this.added(collectionName, collectionScope.generateId(doc), doc);\n        },\n        changedAt: (doc, oldDoc, atIndex) => {\n          doc = collectionScope.engine.config.beforePublish('changedAt', doc, oldDoc, atIndex);\n          doc = collectionScope.addCustomFields(doc, {\n            searchDefinition: definitionString,\n            searchOptions: optionsString,\n            sortPosition: atIndex,\n            originalId: doc._id\n          });\n\n          this.changed(collectionName, collectionScope.generateId(doc), doc)\n        },\n        movedTo: (doc, fromIndex, toIndex, before) => {\n          doc = collectionScope.engine.config.beforePublish('movedTo', doc, fromIndex, toIndex, before);\n          doc = collectionScope.addCustomFields(doc, {\n            searchDefinition: definitionString,\n            searchOptions: optionsString,\n            sortPosition: toIndex\n          });\n\n          let beforeDoc = collectionScope._indexConfiguration.collection.findOne(before);\n\n          if (beforeDoc) {\n            beforeDoc = collectionScope.addCustomFields(beforeDoc, {\n              searchDefinition: definitionString,\n              searchOptions: optionsString,\n              sortPosition: fromIndex\n            });\n            this.changed(collectionName, collectionScope.generateId(beforeDoc), beforeDoc);\n          }\n\n          this.changed(collectionName, collectionScope.generateId(doc), doc);\n        },\n        removedAt: (doc, atIndex) => {\n          doc = collectionScope.engine.config.beforePublish('removedAt', doc, atIndex);\n          doc = collectionScope.addCustomFields(doc, { searchDefinition: definitionString, searchOptions: optionsString });\n          this.removed(collectionName, collectionScope.generateId(doc));\n        }\n      });\n\n      this.onStop(function () {\n        resultsHandle.stop();\n      });\n\n      this.ready();\n    });\n  }\n};\n","/**\n * The MongoDBEngine lets you search the index on the server side with MongoDB. Subscriptions and publications\n * are handled within the Engine.\n *\n * @type {MongoDBEngine}\n */\nMongoDBEngine = class MongoDBEngine extends ReactiveEngine {\n  /**\n   * Return default configuration.\n   *\n   * @returns {Object}\n   */\n  defaultConfiguration() {\n    return _.defaults({}, MongoDBEngine.defaultMongoConfiguration(this), super.defaultConfiguration());\n  }\n\n  /**\n   * Default mongo configuration, used in constructor and MinimongoEngine to get the configuration.\n   *\n   * @param {Object} engineScope Scope of the engine\n   *\n   * @returns {Object}\n   */\n  static defaultMongoConfiguration(engineScope) {\n    return {\n      aggregation: '$or',\n      selector(searchObject, options, aggregation) {\n        let selector = {};\n\n        selector[aggregation] = [];\n\n        _.each(searchObject, (searchString, field) => {\n          let fieldSelector = engineScope.callConfigMethod(\n            'selectorPerField', field, searchString, options\n          );\n\n          if (fieldSelector) {\n            selector[aggregation].push(fieldSelector);\n          }\n        });\n\n        return selector;\n      },\n      selectorPerField(field, searchString) {\n        let selector = {};\n\n        selector[field] = { '$regex' : `.*${searchString}.*`, '$options' : 'i'};\n\n        return selector\n      },\n      sort(searchObject, options) {\n        return options.index.fields;\n      }\n    };\n  }\n\n  /**\n   * Return the find options for the mongo find query.\n   *\n   * @param {String} searchDefinition Search definition\n   * @param {Object} options          Search and index options\n   */\n  getFindOptions(searchDefinition, options) {\n    return {\n      sort: this.callConfigMethod('sort', searchDefinition, options),\n      limit: options.search.limit,\n      skip: options.search.skip,\n      fields: this.callConfigMethod('fields', searchDefinition, options)\n    };\n  }\n\n  /**\n   * Return the reactive search cursor.\n   *\n   * @param {String} searchDefinition Search definition\n   * @param {Object} options          Search and index options\n   */\n  getSearchCursor(searchDefinition, options) {\n    let selector = this.callConfigMethod('selector', searchDefinition, options, this.config.aggregation),\n      findOptions = this.getFindOptions(searchDefinition, options),\n      collection = options.index.collection;\n\n    check(options, Object);\n    check(selector, Object);\n    check(findOptions, Object);\n\n    return new Cursor(\n      collection.find(selector, findOptions),\n      collection.find(selector).count()\n    );\n  }\n};\n","/**\n * The MinimongEngine lets you search the index on the client-side.\n *\n * @type {MinimongoEngine}\n */\nMinimongoEngine = class MinimongoEngine extends Engine {\n  /**\n   * Return default configuration.\n   *\n   * @returns {Object}\n   */\n  defaultConfiguration() {\n    return _.defaults({}, MongoDBEngine.defaultMongoConfiguration(this), super.defaultConfiguration());\n  }\n\n  /**\n   * Search the index.\n   *\n   * @param {Object} searchDefinition Search definition\n   * @param {Object} options          Object of options\n   *\n   * @returns {cursor}\n   */\n  search(searchDefinition, options) {\n    if (!Meteor.isClient) {\n      throw new Meteor.Error('only-client', 'Minimongo can only be used on the client');\n    }\n\n    searchDefinition = this.transformSearchDefinition(searchDefinition, options);\n\n    // check() calls are in getSearchCursor method\n    return MongoDBEngine.prototype.getSearchCursor.apply(this, [searchDefinition, options]);\n  }\n};\n\nMinimongoEngine.prototype.checkSearchParam = ReactiveEngine.prototype.checkSearchParam;\nMinimongoEngine.prototype.transformSearchDefinition = ReactiveEngine.prototype.transformSearchDefinition;\n\nMinimongoEngine.prototype.getFindOptions = function (...args) {\n  let findOptions = MongoDBEngine.prototype.getFindOptions.apply(this, args);\n\n  findOptions.transform = this.config.transform;\n\n  return findOptions;\n};\n","/**\n * The MongoTextIndexEngine lets you search the index with Mongo text indexes.\n *\n * @type {MongoTextIndexEngine}\n */\nMongoTextIndexEngine = class MongoTextIndexEngine extends ReactiveEngine {\n  /**\n   * Return default configuration.\n   *\n   * @returns {Object}\n   */\n  defaultConfiguration() {\n    let mongoConfiguration = MongoDBEngine.defaultMongoConfiguration(this);\n\n    mongoConfiguration.selector = function (searchString) {\n      if (searchString.trim()) {\n        return { $text: { $search: searchString } };\n      }\n\n      return {};\n    };\n\n    return _.defaults({}, mongoConfiguration, super.defaultConfiguration());\n  }\n\n  /**\n   * Setup the index on creation.\n   *\n   * @param {Object} indexConfig Index configuration\n   */\n  onIndexCreate(indexConfig) {\n    super.onIndexCreate(indexConfig);\n\n    if (Meteor.isServer) {\n      let textIndexesConfig = {};\n\n      _.each(indexConfig.fields, function (field) {\n        textIndexesConfig[field] = 'text';\n      });\n\n      if (indexConfig.weights) {\n        textIndexesConfig.weights = options.weights();\n      }\n\n      indexConfig.collection._ensureIndex(textIndexesConfig);\n    }\n  }\n\n  /**\n   * Transform the search definition.\n   *\n   * @param {String|Object} searchDefinition Search definition\n   * @param {Object}        options          Search and index options\n   *\n   * @returns {Object}\n   */\n  transformSearchDefinition(searchDefinition, options) {\n    return searchDefinition;\n  }\n\n  /**\n   * Check the given search parameter for validity\n   *\n   * @param search\n   */\n  checkSearchParam(search) {\n    check(search, String);\n  }\n};\n\n// Explicitely inherit getSearchCursor method functionality\nMongoTextIndexEngine.prototype.getSearchCursor = MongoDBEngine.prototype.getSearchCursor;\nMongoTextIndexEngine.prototype.getFindOptions = MongoDBEngine.prototype.getFindOptions;\n","EasySearch = {\n  // Core\n  Index,\n  Engine,\n  ReactiveEngine,\n  Cursor,\n  // Engines\n  MongoDB: MongoDBEngine,\n  Minimongo: MinimongoEngine,\n  MongoTextIndex: MongoTextIndexEngine\n};\n"]}}]