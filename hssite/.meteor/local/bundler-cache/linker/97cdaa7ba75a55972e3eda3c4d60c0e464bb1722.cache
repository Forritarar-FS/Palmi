[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar Template = Package.templating.Template;\nvar _ = Package.underscore._;\nvar Blaze = Package.blaze.Blaze;\nvar UI = Package.blaze.UI;\nvar Handlebars = Package.blaze.Handlebars;\nvar Spacebars = Package.spacebars.Spacebars;\nvar HTML = Package.htmljs.HTML;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/sacha_spin/packages/sacha_spin.js                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n(function () {                                                                                                         // 1\n                                                                                                                       // 2\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/sacha:spin/.npm/package/node_modules/spin.js/spin.js                                                    //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n/**                                                                                                                 // 1\n * Copyright (c) 2011-2014 Felix Gnass                                                                              // 2\n * Licensed under the MIT license                                                                                   // 3\n * http://spin.js.org/                                                                                              // 4\n *                                                                                                                  // 5\n * Example:                                                                                                         // 6\n    var opts = {                                                                                                    // 7\n      lines: 12             // The number of lines to draw                                                          // 8\n    , length: 7             // The length of each line                                                              // 9\n    , width: 5              // The line thickness                                                                   // 10\n    , radius: 10            // The radius of the inner circle                                                       // 11\n    , scale: 1.0            // Scales overall size of the spinner                                                   // 12\n    , corners: 1            // Roundness (0..1)                                                                     // 13\n    , color: '#000'         // #rgb or #rrggbb                                                                      // 14\n    , opacity: 1/4          // Opacity of the lines                                                                 // 15\n    , rotate: 0             // Rotation offset                                                                      // 16\n    , direction: 1          // 1: clockwise, -1: counterclockwise                                                   // 17\n    , speed: 1              // Rounds per second                                                                    // 18\n    , trail: 100            // Afterglow percentage                                                                 // 19\n    , fps: 20               // Frames per second when using setTimeout()                                            // 20\n    , zIndex: 2e9           // Use a high z-index by default                                                        // 21\n    , className: 'spinner'  // CSS class to assign to the element                                                   // 22\n    , top: '50%'            // center vertically                                                                    // 23\n    , left: '50%'           // center horizontally                                                                  // 24\n    , shadow: false         // Whether to render a shadow                                                           // 25\n    , hwaccel: false        // Whether to use hardware acceleration (might be buggy)                                // 26\n    , position: 'absolute'  // Element positioning                                                                  // 27\n    }                                                                                                               // 28\n    var target = document.getElementById('foo')                                                                     // 29\n    var spinner = new Spinner(opts).spin(target)                                                                    // 30\n */                                                                                                                 // 31\n;(function (root, factory) {                                                                                        // 32\n                                                                                                                    // 33\n  /* CommonJS */                                                                                                    // 34\n  if (typeof exports == 'object') module.exports = factory()                                                        // 35\n                                                                                                                    // 36\n  /* AMD module */                                                                                                  // 37\n  else if (typeof define == 'function' && define.amd) define(factory)                                               // 38\n                                                                                                                    // 39\n  /* Browser global */                                                                                              // 40\n  else root.Spinner = factory()                                                                                     // 41\n}(this, function () {                                                                                               // 42\n  \"use strict\"                                                                                                      // 43\n                                                                                                                    // 44\n  var prefixes = ['webkit', 'Moz', 'ms', 'O'] /* Vendor prefixes */                                                 // 45\n    , animations = {} /* Animation rules keyed by their name */                                                     // 46\n    , useCssAnimations /* Whether to use CSS animations or setTimeout */                                            // 47\n    , sheet /* A stylesheet to hold the @keyframe or VML rules. */                                                  // 48\n                                                                                                                    // 49\n  /**                                                                                                               // 50\n   * Utility function to create elements. If no tag name is given,                                                  // 51\n   * a DIV is created. Optionally properties can be passed.                                                         // 52\n   */                                                                                                               // 53\n  function createEl (tag, prop) {                                                                                   // 54\n    var el = document.createElement(tag || 'div')                                                                   // 55\n      , n                                                                                                           // 56\n                                                                                                                    // 57\n    for (n in prop) el[n] = prop[n]                                                                                 // 58\n    return el                                                                                                       // 59\n  }                                                                                                                 // 60\n                                                                                                                    // 61\n  /**                                                                                                               // 62\n   * Appends children and returns the parent.                                                                       // 63\n   */                                                                                                               // 64\n  function ins (parent /* child1, child2, ...*/) {                                                                  // 65\n    for (var i = 1, n = arguments.length; i < n; i++) {                                                             // 66\n      parent.appendChild(arguments[i])                                                                              // 67\n    }                                                                                                               // 68\n                                                                                                                    // 69\n    return parent                                                                                                   // 70\n  }                                                                                                                 // 71\n                                                                                                                    // 72\n  /**                                                                                                               // 73\n   * Creates an opacity keyframe animation rule and returns its name.                                               // 74\n   * Since most mobile Webkits have timing issues with animation-delay,                                             // 75\n   * we create separate rules for each line/segment.                                                                // 76\n   */                                                                                                               // 77\n  function addAnimation (alpha, trail, i, lines) {                                                                  // 78\n    var name = ['opacity', trail, ~~(alpha * 100), i, lines].join('-')                                              // 79\n      , start = 0.01 + i/lines * 100                                                                                // 80\n      , z = Math.max(1 - (1-alpha) / trail * (100-start), alpha)                                                    // 81\n      , prefix = useCssAnimations.substring(0, useCssAnimations.indexOf('Animation')).toLowerCase()                 // 82\n      , pre = prefix && '-' + prefix + '-' || ''                                                                    // 83\n                                                                                                                    // 84\n    if (!animations[name]) {                                                                                        // 85\n      sheet.insertRule(                                                                                             // 86\n        '@' + pre + 'keyframes ' + name + '{' +                                                                     // 87\n        '0%{opacity:' + z + '}' +                                                                                   // 88\n        start + '%{opacity:' + alpha + '}' +                                                                        // 89\n        (start+0.01) + '%{opacity:1}' +                                                                             // 90\n        (start+trail) % 100 + '%{opacity:' + alpha + '}' +                                                          // 91\n        '100%{opacity:' + z + '}' +                                                                                 // 92\n        '}', sheet.cssRules.length)                                                                                 // 93\n                                                                                                                    // 94\n      animations[name] = 1                                                                                          // 95\n    }                                                                                                               // 96\n                                                                                                                    // 97\n    return name                                                                                                     // 98\n  }                                                                                                                 // 99\n                                                                                                                    // 100\n  /**                                                                                                               // 101\n   * Tries various vendor prefixes and returns the first supported property.                                        // 102\n   */                                                                                                               // 103\n  function vendor (el, prop) {                                                                                      // 104\n    var s = el.style                                                                                                // 105\n      , pp                                                                                                          // 106\n      , i                                                                                                           // 107\n                                                                                                                    // 108\n    prop = prop.charAt(0).toUpperCase() + prop.slice(1)                                                             // 109\n    if (s[prop] !== undefined) return prop                                                                          // 110\n    for (i = 0; i < prefixes.length; i++) {                                                                         // 111\n      pp = prefixes[i]+prop                                                                                         // 112\n      if (s[pp] !== undefined) return pp                                                                            // 113\n    }                                                                                                               // 114\n  }                                                                                                                 // 115\n                                                                                                                    // 116\n  /**                                                                                                               // 117\n   * Sets multiple style properties at once.                                                                        // 118\n   */                                                                                                               // 119\n  function css (el, prop) {                                                                                         // 120\n    for (var n in prop) {                                                                                           // 121\n      el.style[vendor(el, n) || n] = prop[n]                                                                        // 122\n    }                                                                                                               // 123\n                                                                                                                    // 124\n    return el                                                                                                       // 125\n  }                                                                                                                 // 126\n                                                                                                                    // 127\n  /**                                                                                                               // 128\n   * Fills in default values.                                                                                       // 129\n   */                                                                                                               // 130\n  function merge (obj) {                                                                                            // 131\n    for (var i = 1; i < arguments.length; i++) {                                                                    // 132\n      var def = arguments[i]                                                                                        // 133\n      for (var n in def) {                                                                                          // 134\n        if (obj[n] === undefined) obj[n] = def[n]                                                                   // 135\n      }                                                                                                             // 136\n    }                                                                                                               // 137\n    return obj                                                                                                      // 138\n  }                                                                                                                 // 139\n                                                                                                                    // 140\n  /**                                                                                                               // 141\n   * Returns the line color from the given string or array.                                                         // 142\n   */                                                                                                               // 143\n  function getColor (color, idx) {                                                                                  // 144\n    return typeof color == 'string' ? color : color[idx % color.length]                                             // 145\n  }                                                                                                                 // 146\n                                                                                                                    // 147\n  // Built-in defaults                                                                                              // 148\n                                                                                                                    // 149\n  var defaults = {                                                                                                  // 150\n    lines: 12             // The number of lines to draw                                                            // 151\n  , length: 7             // The length of each line                                                                // 152\n  , width: 5              // The line thickness                                                                     // 153\n  , radius: 10            // The radius of the inner circle                                                         // 154\n  , scale: 1.0            // Scales overall size of the spinner                                                     // 155\n  , corners: 1            // Roundness (0..1)                                                                       // 156\n  , color: '#000'         // #rgb or #rrggbb                                                                        // 157\n  , opacity: 1/4          // Opacity of the lines                                                                   // 158\n  , rotate: 0             // Rotation offset                                                                        // 159\n  , direction: 1          // 1: clockwise, -1: counterclockwise                                                     // 160\n  , speed: 1              // Rounds per second                                                                      // 161\n  , trail: 100            // Afterglow percentage                                                                   // 162\n  , fps: 20               // Frames per second when using setTimeout()                                              // 163\n  , zIndex: 2e9           // Use a high z-index by default                                                          // 164\n  , className: 'spinner'  // CSS class to assign to the element                                                     // 165\n  , top: '50%'            // center vertically                                                                      // 166\n  , left: '50%'           // center horizontally                                                                    // 167\n  , shadow: false         // Whether to render a shadow                                                             // 168\n  , hwaccel: false        // Whether to use hardware acceleration (might be buggy)                                  // 169\n  , position: 'absolute'  // Element positioning                                                                    // 170\n  }                                                                                                                 // 171\n                                                                                                                    // 172\n  /** The constructor */                                                                                            // 173\n  function Spinner (o) {                                                                                            // 174\n    this.opts = merge(o || {}, Spinner.defaults, defaults)                                                          // 175\n  }                                                                                                                 // 176\n                                                                                                                    // 177\n  // Global defaults that override the built-ins:                                                                   // 178\n  Spinner.defaults = {}                                                                                             // 179\n                                                                                                                    // 180\n  merge(Spinner.prototype, {                                                                                        // 181\n    /**                                                                                                             // 182\n     * Adds the spinner to the given target element. If this instance is already                                    // 183\n     * spinning, it is automatically removed from its previous target b calling                                     // 184\n     * stop() internally.                                                                                           // 185\n     */                                                                                                             // 186\n    spin: function (target) {                                                                                       // 187\n      this.stop()                                                                                                   // 188\n                                                                                                                    // 189\n      var self = this                                                                                               // 190\n        , o = self.opts                                                                                             // 191\n        , el = self.el = createEl(null, {className: o.className})                                                   // 192\n                                                                                                                    // 193\n      css(el, {                                                                                                     // 194\n        position: o.position                                                                                        // 195\n      , width: 0                                                                                                    // 196\n      , zIndex: o.zIndex                                                                                            // 197\n      , left: o.left                                                                                                // 198\n      , top: o.top                                                                                                  // 199\n      })                                                                                                            // 200\n                                                                                                                    // 201\n      if (target) {                                                                                                 // 202\n        target.insertBefore(el, target.firstChild || null)                                                          // 203\n      }                                                                                                             // 204\n                                                                                                                    // 205\n      el.setAttribute('role', 'progressbar')                                                                        // 206\n      self.lines(el, self.opts)                                                                                     // 207\n                                                                                                                    // 208\n      if (!useCssAnimations) {                                                                                      // 209\n        // No CSS animation support, use setTimeout() instead                                                       // 210\n        var i = 0                                                                                                   // 211\n          , start = (o.lines - 1) * (1 - o.direction) / 2                                                           // 212\n          , alpha                                                                                                   // 213\n          , fps = o.fps                                                                                             // 214\n          , f = fps / o.speed                                                                                       // 215\n          , ostep = (1 - o.opacity) / (f * o.trail / 100)                                                           // 216\n          , astep = f / o.lines                                                                                     // 217\n                                                                                                                    // 218\n        ;(function anim () {                                                                                        // 219\n          i++                                                                                                       // 220\n          for (var j = 0; j < o.lines; j++) {                                                                       // 221\n            alpha = Math.max(1 - (i + (o.lines - j) * astep) % f * ostep, o.opacity)                                // 222\n                                                                                                                    // 223\n            self.opacity(el, j * o.direction + start, alpha, o)                                                     // 224\n          }                                                                                                         // 225\n          self.timeout = self.el && setTimeout(anim, ~~(1000 / fps))                                                // 226\n        })()                                                                                                        // 227\n      }                                                                                                             // 228\n      return self                                                                                                   // 229\n    }                                                                                                               // 230\n                                                                                                                    // 231\n    /**                                                                                                             // 232\n     * Stops and removes the Spinner.                                                                               // 233\n     */                                                                                                             // 234\n  , stop: function () {                                                                                             // 235\n      var el = this.el                                                                                              // 236\n      if (el) {                                                                                                     // 237\n        clearTimeout(this.timeout)                                                                                  // 238\n        if (el.parentNode) el.parentNode.removeChild(el)                                                            // 239\n        this.el = undefined                                                                                         // 240\n      }                                                                                                             // 241\n      return this                                                                                                   // 242\n    }                                                                                                               // 243\n                                                                                                                    // 244\n    /**                                                                                                             // 245\n     * Internal method that draws the individual lines. Will be overwritten                                         // 246\n     * in VML fallback mode below.                                                                                  // 247\n     */                                                                                                             // 248\n  , lines: function (el, o) {                                                                                       // 249\n      var i = 0                                                                                                     // 250\n        , start = (o.lines - 1) * (1 - o.direction) / 2                                                             // 251\n        , seg                                                                                                       // 252\n                                                                                                                    // 253\n      function fill (color, shadow) {                                                                               // 254\n        return css(createEl(), {                                                                                    // 255\n          position: 'absolute'                                                                                      // 256\n        , width: o.scale * (o.length + o.width) + 'px'                                                              // 257\n        , height: o.scale * o.width + 'px'                                                                          // 258\n        , background: color                                                                                         // 259\n        , boxShadow: shadow                                                                                         // 260\n        , transformOrigin: 'left'                                                                                   // 261\n        , transform: 'rotate(' + ~~(360/o.lines*i + o.rotate) + 'deg) translate(' + o.scale*o.radius + 'px' + ',0)' // 262\n        , borderRadius: (o.corners * o.scale * o.width >> 1) + 'px'                                                 // 263\n        })                                                                                                          // 264\n      }                                                                                                             // 265\n                                                                                                                    // 266\n      for (; i < o.lines; i++) {                                                                                    // 267\n        seg = css(createEl(), {                                                                                     // 268\n          position: 'absolute'                                                                                      // 269\n        , top: 1 + ~(o.scale * o.width / 2) + 'px'                                                                  // 270\n        , transform: o.hwaccel ? 'translate3d(0,0,0)' : ''                                                          // 271\n        , opacity: o.opacity                                                                                        // 272\n        , animation: useCssAnimations && addAnimation(o.opacity, o.trail, start + i * o.direction, o.lines) + ' ' + 1 / o.speed + 's linear infinite'\n        })                                                                                                          // 274\n                                                                                                                    // 275\n        if (o.shadow) ins(seg, css(fill('#000', '0 0 4px #000'), {top: '2px'}))                                     // 276\n        ins(el, ins(seg, fill(getColor(o.color, i), '0 0 1px rgba(0,0,0,.1)')))                                     // 277\n      }                                                                                                             // 278\n      return el                                                                                                     // 279\n    }                                                                                                               // 280\n                                                                                                                    // 281\n    /**                                                                                                             // 282\n     * Internal method that adjusts the opacity of a single line.                                                   // 283\n     * Will be overwritten in VML fallback mode below.                                                              // 284\n     */                                                                                                             // 285\n  , opacity: function (el, i, val) {                                                                                // 286\n      if (i < el.childNodes.length) el.childNodes[i].style.opacity = val                                            // 287\n    }                                                                                                               // 288\n                                                                                                                    // 289\n  })                                                                                                                // 290\n                                                                                                                    // 291\n                                                                                                                    // 292\n  function initVML () {                                                                                             // 293\n                                                                                                                    // 294\n    /* Utility function to create a VML tag */                                                                      // 295\n    function vml (tag, attr) {                                                                                      // 296\n      return createEl('<' + tag + ' xmlns=\"urn:schemas-microsoft.com:vml\" class=\"spin-vml\">', attr)                 // 297\n    }                                                                                                               // 298\n                                                                                                                    // 299\n    // No CSS transforms but VML support, add a CSS rule for VML elements:                                          // 300\n    sheet.addRule('.spin-vml', 'behavior:url(#default#VML)')                                                        // 301\n                                                                                                                    // 302\n    Spinner.prototype.lines = function (el, o) {                                                                    // 303\n      var r = o.scale * (o.length + o.width)                                                                        // 304\n        , s = o.scale * 2 * r                                                                                       // 305\n                                                                                                                    // 306\n      function grp () {                                                                                             // 307\n        return css(                                                                                                 // 308\n          vml('group', {                                                                                            // 309\n            coordsize: s + ' ' + s                                                                                  // 310\n          , coordorigin: -r + ' ' + -r                                                                              // 311\n          })                                                                                                        // 312\n        , { width: s, height: s }                                                                                   // 313\n        )                                                                                                           // 314\n      }                                                                                                             // 315\n                                                                                                                    // 316\n      var margin = -(o.width + o.length) * o.scale * 2 + 'px'                                                       // 317\n        , g = css(grp(), {position: 'absolute', top: margin, left: margin})                                         // 318\n        , i                                                                                                         // 319\n                                                                                                                    // 320\n      function seg (i, dx, filter) {                                                                                // 321\n        ins(                                                                                                        // 322\n          g                                                                                                         // 323\n        , ins(                                                                                                      // 324\n            css(grp(), {rotation: 360 / o.lines * i + 'deg', left: ~~dx})                                           // 325\n          , ins(                                                                                                    // 326\n              css(                                                                                                  // 327\n                vml('roundrect', {arcsize: o.corners})                                                              // 328\n              , { width: r                                                                                          // 329\n                , height: o.scale * o.width                                                                         // 330\n                , left: o.scale * o.radius                                                                          // 331\n                , top: -o.scale * o.width >> 1                                                                      // 332\n                , filter: filter                                                                                    // 333\n                }                                                                                                   // 334\n              )                                                                                                     // 335\n            , vml('fill', {color: getColor(o.color, i), opacity: o.opacity})                                        // 336\n            , vml('stroke', {opacity: 0}) // transparent stroke to fix color bleeding upon opacity change           // 337\n            )                                                                                                       // 338\n          )                                                                                                         // 339\n        )                                                                                                           // 340\n      }                                                                                                             // 341\n                                                                                                                    // 342\n      if (o.shadow)                                                                                                 // 343\n        for (i = 1; i <= o.lines; i++) {                                                                            // 344\n          seg(i, -2, 'progid:DXImageTransform.Microsoft.Blur(pixelradius=2,makeshadow=1,shadowopacity=.3)')         // 345\n        }                                                                                                           // 346\n                                                                                                                    // 347\n      for (i = 1; i <= o.lines; i++) seg(i)                                                                         // 348\n      return ins(el, g)                                                                                             // 349\n    }                                                                                                               // 350\n                                                                                                                    // 351\n    Spinner.prototype.opacity = function (el, i, val, o) {                                                          // 352\n      var c = el.firstChild                                                                                         // 353\n      o = o.shadow && o.lines || 0                                                                                  // 354\n      if (c && i + o < c.childNodes.length) {                                                                       // 355\n        c = c.childNodes[i + o]; c = c && c.firstChild; c = c && c.firstChild                                       // 356\n        if (c) c.opacity = val                                                                                      // 357\n      }                                                                                                             // 358\n    }                                                                                                               // 359\n  }                                                                                                                 // 360\n                                                                                                                    // 361\n  if (typeof document !== 'undefined') {                                                                            // 362\n    sheet = (function () {                                                                                          // 363\n      var el = createEl('style', {type : 'text/css'})                                                               // 364\n      ins(document.getElementsByTagName('head')[0], el)                                                             // 365\n      return el.sheet || el.styleSheet                                                                              // 366\n    }())                                                                                                            // 367\n                                                                                                                    // 368\n    var probe = css(createEl('group'), {behavior: 'url(#default#VML)'})                                             // 369\n                                                                                                                    // 370\n    if (!vendor(probe, 'transform') && probe.adj) initVML()                                                         // 371\n    else useCssAnimations = vendor(probe, 'animation')                                                              // 372\n  }                                                                                                                 // 373\n                                                                                                                    // 374\n  return Spinner                                                                                                    // 375\n                                                                                                                    // 376\n}));                                                                                                                // 377\n                                                                                                                    // 378\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       // 388\n}).call(this);                                                                                                         // 389\n                                                                                                                       // 390\n                                                                                                                       // 391\n                                                                                                                       // 392\n                                                                                                                       // 393\n                                                                                                                       // 394\n                                                                                                                       // 395\n(function () {                                                                                                         // 396\n                                                                                                                       // 397\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/sacha:spin/lib/template.spinner.js                                                                      //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n                                                                                                                    // 1\nTemplate.__checkName(\"spinner\");                                                                                    // 2\nTemplate[\"spinner\"] = new Template(\"Template.spinner\", (function() {                                                // 3\n  var view = this;                                                                                                  // 4\n  return HTML.Raw('<div class=\"spinner-container\"></div>');                                                         // 5\n}));                                                                                                                // 6\n                                                                                                                    // 7\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       // 412\n}).call(this);                                                                                                         // 413\n                                                                                                                       // 414\n                                                                                                                       // 415\n                                                                                                                       // 416\n                                                                                                                       // 417\n                                                                                                                       // 418\n                                                                                                                       // 419\n(function () {                                                                                                         // 420\n                                                                                                                       // 421\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/sacha:spin/lib/spinner.js                                                                               //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nTemplate.spinner.onRendered(function(){                                                                             // 1\n  var options = _.extend({}, Meteor.Spinner.options, this.data);                                                    // 2\n                                                                                                                    // 3\n  this.spinner = new Spinner(options);                                                                              // 4\n  this.spinner.spin(this.firstNode);                                                                                // 5\n});                                                                                                                 // 6\n                                                                                                                    // 7\n                                                                                                                    // 8\nTemplate.spinner.onDestroyed(function(){                                                                            // 9\n  this.spinner && this.spinner.stop();                                                                              // 10\n});                                                                                                                 // 11\n                                                                                                                    // 12\n                                                                                                                    // 13\nMeteor.Spinner = {                                                                                                  // 14\n  options: {                                                                                                        // 15\n    lines: 13,  // The number of lines to draw                                                                      // 16\n    length: 8,  // The length of each line                                                                          // 17\n    width: 3,  // The line thickness                                                                                // 18\n    radius: 12,  // The radius of the inner circle                                                                  // 19\n    corners: 1,  // Corner roundness (0..1)                                                                         // 20\n    rotate: 0,  // The rotation offset                                                                              // 21\n    direction: 1,  // 1: clockwise, -1: counterclockwise                                                            // 22\n    color: '#000',  // #rgb or #rrggbb                                                                              // 23\n    speed: 1.2,  // Rounds per second                                                                               // 24\n    trail: 60,  // Afterglow percentage                                                                             // 25\n    shadow: false,  // Whether to render a shadow                                                                   // 26\n    hwaccel: false,  // Whether to use hardware acceleration                                                        // 27\n    className: 'spinner', // The CSS class to assign to the spinner                                                 // 28\n    zIndex: 2e9,  // The z-index (defaults to 2000000000)                                                           // 29\n    top: '50%',  // Top position relative to parent in px                                                           // 30\n    left: '50%'  // Left position relative to parent in px                                                          // 31\n  }                                                                                                                 // 32\n};                                                                                                                  // 33\n                                                                                                                    // 34\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       // 463\n}).call(this);                                                                                                         // 464\n                                                                                                                       // 465\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['sacha:spin'] = {};\n\n})();\n","servePath":"/packages/sacha_spin.js","sourceMap":{"version":3,"sources":["/packages/sacha_spin/packages/sacha_spin.js"],"names":[],"mappingsfile":"/packages/sacha_spin.js","sourcesContent":["(function () {\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/sacha:spin/.npm/package/node_modules/spin.js/spin.js                                                    //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n/**                                                                                                                 // 1\n * Copyright (c) 2011-2014 Felix Gnass                                                                              // 2\n * Licensed under the MIT license                                                                                   // 3\n * http://spin.js.org/                                                                                              // 4\n *                                                                                                                  // 5\n * Example:                                                                                                         // 6\n    var opts = {                                                                                                    // 7\n      lines: 12             // The number of lines to draw                                                          // 8\n    , length: 7             // The length of each line                                                              // 9\n    , width: 5              // The line thickness                                                                   // 10\n    , radius: 10            // The radius of the inner circle                                                       // 11\n    , scale: 1.0            // Scales overall size of the spinner                                                   // 12\n    , corners: 1            // Roundness (0..1)                                                                     // 13\n    , color: '#000'         // #rgb or #rrggbb                                                                      // 14\n    , opacity: 1/4          // Opacity of the lines                                                                 // 15\n    , rotate: 0             // Rotation offset                                                                      // 16\n    , direction: 1          // 1: clockwise, -1: counterclockwise                                                   // 17\n    , speed: 1              // Rounds per second                                                                    // 18\n    , trail: 100            // Afterglow percentage                                                                 // 19\n    , fps: 20               // Frames per second when using setTimeout()                                            // 20\n    , zIndex: 2e9           // Use a high z-index by default                                                        // 21\n    , className: 'spinner'  // CSS class to assign to the element                                                   // 22\n    , top: '50%'            // center vertically                                                                    // 23\n    , left: '50%'           // center horizontally                                                                  // 24\n    , shadow: false         // Whether to render a shadow                                                           // 25\n    , hwaccel: false        // Whether to use hardware acceleration (might be buggy)                                // 26\n    , position: 'absolute'  // Element positioning                                                                  // 27\n    }                                                                                                               // 28\n    var target = document.getElementById('foo')                                                                     // 29\n    var spinner = new Spinner(opts).spin(target)                                                                    // 30\n */                                                                                                                 // 31\n;(function (root, factory) {                                                                                        // 32\n                                                                                                                    // 33\n  /* CommonJS */                                                                                                    // 34\n  if (typeof exports == 'object') module.exports = factory()                                                        // 35\n                                                                                                                    // 36\n  /* AMD module */                                                                                                  // 37\n  else if (typeof define == 'function' && define.amd) define(factory)                                               // 38\n                                                                                                                    // 39\n  /* Browser global */                                                                                              // 40\n  else root.Spinner = factory()                                                                                     // 41\n}(this, function () {                                                                                               // 42\n  \"use strict\"                                                                                                      // 43\n                                                                                                                    // 44\n  var prefixes = ['webkit', 'Moz', 'ms', 'O'] /* Vendor prefixes */                                                 // 45\n    , animations = {} /* Animation rules keyed by their name */                                                     // 46\n    , useCssAnimations /* Whether to use CSS animations or setTimeout */                                            // 47\n    , sheet /* A stylesheet to hold the @keyframe or VML rules. */                                                  // 48\n                                                                                                                    // 49\n  /**                                                                                                               // 50\n   * Utility function to create elements. If no tag name is given,                                                  // 51\n   * a DIV is created. Optionally properties can be passed.                                                         // 52\n   */                                                                                                               // 53\n  function createEl (tag, prop) {                                                                                   // 54\n    var el = document.createElement(tag || 'div')                                                                   // 55\n      , n                                                                                                           // 56\n                                                                                                                    // 57\n    for (n in prop) el[n] = prop[n]                                                                                 // 58\n    return el                                                                                                       // 59\n  }                                                                                                                 // 60\n                                                                                                                    // 61\n  /**                                                                                                               // 62\n   * Appends children and returns the parent.                                                                       // 63\n   */                                                                                                               // 64\n  function ins (parent /* child1, child2, ...*/) {                                                                  // 65\n    for (var i = 1, n = arguments.length; i < n; i++) {                                                             // 66\n      parent.appendChild(arguments[i])                                                                              // 67\n    }                                                                                                               // 68\n                                                                                                                    // 69\n    return parent                                                                                                   // 70\n  }                                                                                                                 // 71\n                                                                                                                    // 72\n  /**                                                                                                               // 73\n   * Creates an opacity keyframe animation rule and returns its name.                                               // 74\n   * Since most mobile Webkits have timing issues with animation-delay,                                             // 75\n   * we create separate rules for each line/segment.                                                                // 76\n   */                                                                                                               // 77\n  function addAnimation (alpha, trail, i, lines) {                                                                  // 78\n    var name = ['opacity', trail, ~~(alpha * 100), i, lines].join('-')                                              // 79\n      , start = 0.01 + i/lines * 100                                                                                // 80\n      , z = Math.max(1 - (1-alpha) / trail * (100-start), alpha)                                                    // 81\n      , prefix = useCssAnimations.substring(0, useCssAnimations.indexOf('Animation')).toLowerCase()                 // 82\n      , pre = prefix && '-' + prefix + '-' || ''                                                                    // 83\n                                                                                                                    // 84\n    if (!animations[name]) {                                                                                        // 85\n      sheet.insertRule(                                                                                             // 86\n        '@' + pre + 'keyframes ' + name + '{' +                                                                     // 87\n        '0%{opacity:' + z + '}' +                                                                                   // 88\n        start + '%{opacity:' + alpha + '}' +                                                                        // 89\n        (start+0.01) + '%{opacity:1}' +                                                                             // 90\n        (start+trail) % 100 + '%{opacity:' + alpha + '}' +                                                          // 91\n        '100%{opacity:' + z + '}' +                                                                                 // 92\n        '}', sheet.cssRules.length)                                                                                 // 93\n                                                                                                                    // 94\n      animations[name] = 1                                                                                          // 95\n    }                                                                                                               // 96\n                                                                                                                    // 97\n    return name                                                                                                     // 98\n  }                                                                                                                 // 99\n                                                                                                                    // 100\n  /**                                                                                                               // 101\n   * Tries various vendor prefixes and returns the first supported property.                                        // 102\n   */                                                                                                               // 103\n  function vendor (el, prop) {                                                                                      // 104\n    var s = el.style                                                                                                // 105\n      , pp                                                                                                          // 106\n      , i                                                                                                           // 107\n                                                                                                                    // 108\n    prop = prop.charAt(0).toUpperCase() + prop.slice(1)                                                             // 109\n    if (s[prop] !== undefined) return prop                                                                          // 110\n    for (i = 0; i < prefixes.length; i++) {                                                                         // 111\n      pp = prefixes[i]+prop                                                                                         // 112\n      if (s[pp] !== undefined) return pp                                                                            // 113\n    }                                                                                                               // 114\n  }                                                                                                                 // 115\n                                                                                                                    // 116\n  /**                                                                                                               // 117\n   * Sets multiple style properties at once.                                                                        // 118\n   */                                                                                                               // 119\n  function css (el, prop) {                                                                                         // 120\n    for (var n in prop) {                                                                                           // 121\n      el.style[vendor(el, n) || n] = prop[n]                                                                        // 122\n    }                                                                                                               // 123\n                                                                                                                    // 124\n    return el                                                                                                       // 125\n  }                                                                                                                 // 126\n                                                                                                                    // 127\n  /**                                                                                                               // 128\n   * Fills in default values.                                                                                       // 129\n   */                                                                                                               // 130\n  function merge (obj) {                                                                                            // 131\n    for (var i = 1; i < arguments.length; i++) {                                                                    // 132\n      var def = arguments[i]                                                                                        // 133\n      for (var n in def) {                                                                                          // 134\n        if (obj[n] === undefined) obj[n] = def[n]                                                                   // 135\n      }                                                                                                             // 136\n    }                                                                                                               // 137\n    return obj                                                                                                      // 138\n  }                                                                                                                 // 139\n                                                                                                                    // 140\n  /**                                                                                                               // 141\n   * Returns the line color from the given string or array.                                                         // 142\n   */                                                                                                               // 143\n  function getColor (color, idx) {                                                                                  // 144\n    return typeof color == 'string' ? color : color[idx % color.length]                                             // 145\n  }                                                                                                                 // 146\n                                                                                                                    // 147\n  // Built-in defaults                                                                                              // 148\n                                                                                                                    // 149\n  var defaults = {                                                                                                  // 150\n    lines: 12             // The number of lines to draw                                                            // 151\n  , length: 7             // The length of each line                                                                // 152\n  , width: 5              // The line thickness                                                                     // 153\n  , radius: 10            // The radius of the inner circle                                                         // 154\n  , scale: 1.0            // Scales overall size of the spinner                                                     // 155\n  , corners: 1            // Roundness (0..1)                                                                       // 156\n  , color: '#000'         // #rgb or #rrggbb                                                                        // 157\n  , opacity: 1/4          // Opacity of the lines                                                                   // 158\n  , rotate: 0             // Rotation offset                                                                        // 159\n  , direction: 1          // 1: clockwise, -1: counterclockwise                                                     // 160\n  , speed: 1              // Rounds per second                                                                      // 161\n  , trail: 100            // Afterglow percentage                                                                   // 162\n  , fps: 20               // Frames per second when using setTimeout()                                              // 163\n  , zIndex: 2e9           // Use a high z-index by default                                                          // 164\n  , className: 'spinner'  // CSS class to assign to the element                                                     // 165\n  , top: '50%'            // center vertically                                                                      // 166\n  , left: '50%'           // center horizontally                                                                    // 167\n  , shadow: false         // Whether to render a shadow                                                             // 168\n  , hwaccel: false        // Whether to use hardware acceleration (might be buggy)                                  // 169\n  , position: 'absolute'  // Element positioning                                                                    // 170\n  }                                                                                                                 // 171\n                                                                                                                    // 172\n  /** The constructor */                                                                                            // 173\n  function Spinner (o) {                                                                                            // 174\n    this.opts = merge(o || {}, Spinner.defaults, defaults)                                                          // 175\n  }                                                                                                                 // 176\n                                                                                                                    // 177\n  // Global defaults that override the built-ins:                                                                   // 178\n  Spinner.defaults = {}                                                                                             // 179\n                                                                                                                    // 180\n  merge(Spinner.prototype, {                                                                                        // 181\n    /**                                                                                                             // 182\n     * Adds the spinner to the given target element. If this instance is already                                    // 183\n     * spinning, it is automatically removed from its previous target b calling                                     // 184\n     * stop() internally.                                                                                           // 185\n     */                                                                                                             // 186\n    spin: function (target) {                                                                                       // 187\n      this.stop()                                                                                                   // 188\n                                                                                                                    // 189\n      var self = this                                                                                               // 190\n        , o = self.opts                                                                                             // 191\n        , el = self.el = createEl(null, {className: o.className})                                                   // 192\n                                                                                                                    // 193\n      css(el, {                                                                                                     // 194\n        position: o.position                                                                                        // 195\n      , width: 0                                                                                                    // 196\n      , zIndex: o.zIndex                                                                                            // 197\n      , left: o.left                                                                                                // 198\n      , top: o.top                                                                                                  // 199\n      })                                                                                                            // 200\n                                                                                                                    // 201\n      if (target) {                                                                                                 // 202\n        target.insertBefore(el, target.firstChild || null)                                                          // 203\n      }                                                                                                             // 204\n                                                                                                                    // 205\n      el.setAttribute('role', 'progressbar')                                                                        // 206\n      self.lines(el, self.opts)                                                                                     // 207\n                                                                                                                    // 208\n      if (!useCssAnimations) {                                                                                      // 209\n        // No CSS animation support, use setTimeout() instead                                                       // 210\n        var i = 0                                                                                                   // 211\n          , start = (o.lines - 1) * (1 - o.direction) / 2                                                           // 212\n          , alpha                                                                                                   // 213\n          , fps = o.fps                                                                                             // 214\n          , f = fps / o.speed                                                                                       // 215\n          , ostep = (1 - o.opacity) / (f * o.trail / 100)                                                           // 216\n          , astep = f / o.lines                                                                                     // 217\n                                                                                                                    // 218\n        ;(function anim () {                                                                                        // 219\n          i++                                                                                                       // 220\n          for (var j = 0; j < o.lines; j++) {                                                                       // 221\n            alpha = Math.max(1 - (i + (o.lines - j) * astep) % f * ostep, o.opacity)                                // 222\n                                                                                                                    // 223\n            self.opacity(el, j * o.direction + start, alpha, o)                                                     // 224\n          }                                                                                                         // 225\n          self.timeout = self.el && setTimeout(anim, ~~(1000 / fps))                                                // 226\n        })()                                                                                                        // 227\n      }                                                                                                             // 228\n      return self                                                                                                   // 229\n    }                                                                                                               // 230\n                                                                                                                    // 231\n    /**                                                                                                             // 232\n     * Stops and removes the Spinner.                                                                               // 233\n     */                                                                                                             // 234\n  , stop: function () {                                                                                             // 235\n      var el = this.el                                                                                              // 236\n      if (el) {                                                                                                     // 237\n        clearTimeout(this.timeout)                                                                                  // 238\n        if (el.parentNode) el.parentNode.removeChild(el)                                                            // 239\n        this.el = undefined                                                                                         // 240\n      }                                                                                                             // 241\n      return this                                                                                                   // 242\n    }                                                                                                               // 243\n                                                                                                                    // 244\n    /**                                                                                                             // 245\n     * Internal method that draws the individual lines. Will be overwritten                                         // 246\n     * in VML fallback mode below.                                                                                  // 247\n     */                                                                                                             // 248\n  , lines: function (el, o) {                                                                                       // 249\n      var i = 0                                                                                                     // 250\n        , start = (o.lines - 1) * (1 - o.direction) / 2                                                             // 251\n        , seg                                                                                                       // 252\n                                                                                                                    // 253\n      function fill (color, shadow) {                                                                               // 254\n        return css(createEl(), {                                                                                    // 255\n          position: 'absolute'                                                                                      // 256\n        , width: o.scale * (o.length + o.width) + 'px'                                                              // 257\n        , height: o.scale * o.width + 'px'                                                                          // 258\n        , background: color                                                                                         // 259\n        , boxShadow: shadow                                                                                         // 260\n        , transformOrigin: 'left'                                                                                   // 261\n        , transform: 'rotate(' + ~~(360/o.lines*i + o.rotate) + 'deg) translate(' + o.scale*o.radius + 'px' + ',0)' // 262\n        , borderRadius: (o.corners * o.scale * o.width >> 1) + 'px'                                                 // 263\n        })                                                                                                          // 264\n      }                                                                                                             // 265\n                                                                                                                    // 266\n      for (; i < o.lines; i++) {                                                                                    // 267\n        seg = css(createEl(), {                                                                                     // 268\n          position: 'absolute'                                                                                      // 269\n        , top: 1 + ~(o.scale * o.width / 2) + 'px'                                                                  // 270\n        , transform: o.hwaccel ? 'translate3d(0,0,0)' : ''                                                          // 271\n        , opacity: o.opacity                                                                                        // 272\n        , animation: useCssAnimations && addAnimation(o.opacity, o.trail, start + i * o.direction, o.lines) + ' ' + 1 / o.speed + 's linear infinite'\n        })                                                                                                          // 274\n                                                                                                                    // 275\n        if (o.shadow) ins(seg, css(fill('#000', '0 0 4px #000'), {top: '2px'}))                                     // 276\n        ins(el, ins(seg, fill(getColor(o.color, i), '0 0 1px rgba(0,0,0,.1)')))                                     // 277\n      }                                                                                                             // 278\n      return el                                                                                                     // 279\n    }                                                                                                               // 280\n                                                                                                                    // 281\n    /**                                                                                                             // 282\n     * Internal method that adjusts the opacity of a single line.                                                   // 283\n     * Will be overwritten in VML fallback mode below.                                                              // 284\n     */                                                                                                             // 285\n  , opacity: function (el, i, val) {                                                                                // 286\n      if (i < el.childNodes.length) el.childNodes[i].style.opacity = val                                            // 287\n    }                                                                                                               // 288\n                                                                                                                    // 289\n  })                                                                                                                // 290\n                                                                                                                    // 291\n                                                                                                                    // 292\n  function initVML () {                                                                                             // 293\n                                                                                                                    // 294\n    /* Utility function to create a VML tag */                                                                      // 295\n    function vml (tag, attr) {                                                                                      // 296\n      return createEl('<' + tag + ' xmlns=\"urn:schemas-microsoft.com:vml\" class=\"spin-vml\">', attr)                 // 297\n    }                                                                                                               // 298\n                                                                                                                    // 299\n    // No CSS transforms but VML support, add a CSS rule for VML elements:                                          // 300\n    sheet.addRule('.spin-vml', 'behavior:url(#default#VML)')                                                        // 301\n                                                                                                                    // 302\n    Spinner.prototype.lines = function (el, o) {                                                                    // 303\n      var r = o.scale * (o.length + o.width)                                                                        // 304\n        , s = o.scale * 2 * r                                                                                       // 305\n                                                                                                                    // 306\n      function grp () {                                                                                             // 307\n        return css(                                                                                                 // 308\n          vml('group', {                                                                                            // 309\n            coordsize: s + ' ' + s                                                                                  // 310\n          , coordorigin: -r + ' ' + -r                                                                              // 311\n          })                                                                                                        // 312\n        , { width: s, height: s }                                                                                   // 313\n        )                                                                                                           // 314\n      }                                                                                                             // 315\n                                                                                                                    // 316\n      var margin = -(o.width + o.length) * o.scale * 2 + 'px'                                                       // 317\n        , g = css(grp(), {position: 'absolute', top: margin, left: margin})                                         // 318\n        , i                                                                                                         // 319\n                                                                                                                    // 320\n      function seg (i, dx, filter) {                                                                                // 321\n        ins(                                                                                                        // 322\n          g                                                                                                         // 323\n        , ins(                                                                                                      // 324\n            css(grp(), {rotation: 360 / o.lines * i + 'deg', left: ~~dx})                                           // 325\n          , ins(                                                                                                    // 326\n              css(                                                                                                  // 327\n                vml('roundrect', {arcsize: o.corners})                                                              // 328\n              , { width: r                                                                                          // 329\n                , height: o.scale * o.width                                                                         // 330\n                , left: o.scale * o.radius                                                                          // 331\n                , top: -o.scale * o.width >> 1                                                                      // 332\n                , filter: filter                                                                                    // 333\n                }                                                                                                   // 334\n              )                                                                                                     // 335\n            , vml('fill', {color: getColor(o.color, i), opacity: o.opacity})                                        // 336\n            , vml('stroke', {opacity: 0}) // transparent stroke to fix color bleeding upon opacity change           // 337\n            )                                                                                                       // 338\n          )                                                                                                         // 339\n        )                                                                                                           // 340\n      }                                                                                                             // 341\n                                                                                                                    // 342\n      if (o.shadow)                                                                                                 // 343\n        for (i = 1; i <= o.lines; i++) {                                                                            // 344\n          seg(i, -2, 'progid:DXImageTransform.Microsoft.Blur(pixelradius=2,makeshadow=1,shadowopacity=.3)')         // 345\n        }                                                                                                           // 346\n                                                                                                                    // 347\n      for (i = 1; i <= o.lines; i++) seg(i)                                                                         // 348\n      return ins(el, g)                                                                                             // 349\n    }                                                                                                               // 350\n                                                                                                                    // 351\n    Spinner.prototype.opacity = function (el, i, val, o) {                                                          // 352\n      var c = el.firstChild                                                                                         // 353\n      o = o.shadow && o.lines || 0                                                                                  // 354\n      if (c && i + o < c.childNodes.length) {                                                                       // 355\n        c = c.childNodes[i + o]; c = c && c.firstChild; c = c && c.firstChild                                       // 356\n        if (c) c.opacity = val                                                                                      // 357\n      }                                                                                                             // 358\n    }                                                                                                               // 359\n  }                                                                                                                 // 360\n                                                                                                                    // 361\n  if (typeof document !== 'undefined') {                                                                            // 362\n    sheet = (function () {                                                                                          // 363\n      var el = createEl('style', {type : 'text/css'})                                                               // 364\n      ins(document.getElementsByTagName('head')[0], el)                                                             // 365\n      return el.sheet || el.styleSheet                                                                              // 366\n    }())                                                                                                            // 367\n                                                                                                                    // 368\n    var probe = css(createEl('group'), {behavior: 'url(#default#VML)'})                                             // 369\n                                                                                                                    // 370\n    if (!vendor(probe, 'transform') && probe.adj) initVML()                                                         // 371\n    else useCssAnimations = vendor(probe, 'animation')                                                              // 372\n  }                                                                                                                 // 373\n                                                                                                                    // 374\n  return Spinner                                                                                                    // 375\n                                                                                                                    // 376\n}));                                                                                                                // 377\n                                                                                                                    // 378\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/sacha:spin/lib/template.spinner.js                                                                      //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n                                                                                                                    // 1\nTemplate.__checkName(\"spinner\");                                                                                    // 2\nTemplate[\"spinner\"] = new Template(\"Template.spinner\", (function() {                                                // 3\n  var view = this;                                                                                                  // 4\n  return HTML.Raw('<div class=\"spinner-container\"></div>');                                                         // 5\n}));                                                                                                                // 6\n                                                                                                                    // 7\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/sacha:spin/lib/spinner.js                                                                               //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nTemplate.spinner.onRendered(function(){                                                                             // 1\n  var options = _.extend({}, Meteor.Spinner.options, this.data);                                                    // 2\n                                                                                                                    // 3\n  this.spinner = new Spinner(options);                                                                              // 4\n  this.spinner.spin(this.firstNode);                                                                                // 5\n});                                                                                                                 // 6\n                                                                                                                    // 7\n                                                                                                                    // 8\nTemplate.spinner.onDestroyed(function(){                                                                            // 9\n  this.spinner && this.spinner.stop();                                                                              // 10\n});                                                                                                                 // 11\n                                                                                                                    // 12\n                                                                                                                    // 13\nMeteor.Spinner = {                                                                                                  // 14\n  options: {                                                                                                        // 15\n    lines: 13,  // The number of lines to draw                                                                      // 16\n    length: 8,  // The length of each line                                                                          // 17\n    width: 3,  // The line thickness                                                                                // 18\n    radius: 12,  // The radius of the inner circle                                                                  // 19\n    corners: 1,  // Corner roundness (0..1)                                                                         // 20\n    rotate: 0,  // The rotation offset                                                                              // 21\n    direction: 1,  // 1: clockwise, -1: counterclockwise                                                            // 22\n    color: '#000',  // #rgb or #rrggbb                                                                              // 23\n    speed: 1.2,  // Rounds per second                                                                               // 24\n    trail: 60,  // Afterglow percentage                                                                             // 25\n    shadow: false,  // Whether to render a shadow                                                                   // 26\n    hwaccel: false,  // Whether to use hardware acceleration                                                        // 27\n    className: 'spinner', // The CSS class to assign to the spinner                                                 // 28\n    zIndex: 2e9,  // The z-index (defaults to 2000000000)                                                           // 29\n    top: '50%',  // Top position relative to parent in px                                                           // 30\n    left: '50%'  // Left position relative to parent in px                                                          // 31\n  }                                                                                                                 // 32\n};                                                                                                                  // 33\n                                                                                                                    // 34\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}}]